<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Photon</name>
    </assembly>
    <members>
        <member name="T:Photon.Controls.Border">
            <summary>
            Draws a border, background, or both around another element
            </summary>
        </member>
        <member name="F:Photon.Controls.Border.BorderBrushProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Border.BorderBrush"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Border.BorderBrush">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Brush"/> used to paint the element's borders
            </summary>
        </member>
        <member name="F:Photon.Controls.Border.BorderThicknessProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Border.BorderThickness"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Border.BorderThickness">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Thickness"/> of the element's borders
            </summary>
        </member>
        <member name="F:Photon.Controls.Border.PaddingProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Border.Padding"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Border.Padding">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Thickness"/> representing the <see cref="T:Photon.Controls.Border"/>'s padding
            </summary>
        </member>
        <member name="M:Photon.Controls.Border.OnRender(Photon.DrawingContext)">
            <summary>
            When overriden in a class, renders the visual
            </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in whihc to render the visual</param>
        </member>
        <member name="T:Photon.Controls.Decorator">
            <summary>
            Provides a base class for elements that apply effects onto or around a single child element, such as <see cref="T:Photon.Controls.Border"/>
            </summary>
        </member>
        <member name="F:Photon.Controls.Decorator.ChildProperty">
            <summary>
            Describes the <see cref="T:Photon.Controls.Decorator"/>'s Child <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Decorator.Child">
            <summary>
            Gets/sets the <see cref="T:Photon.Controls.Decorator"/>'s child <see cref="T:Photon.UIElement"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Decorator.ContentsAffectsLayout">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Decorator"/>'s contents affect layout
            </summary>
        </member>
        <member name="P:Photon.Controls.Decorator.ContentsAlignHorizontally">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Decorator"/>'s content can align horizontally
            </summary>
        </member>
        <member name="P:Photon.Controls.Decorator.ContentsAlignVertically">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Decorator"/>'s content can align vertically
            </summary>
        </member>
        <member name="M:Photon.Controls.Decorator.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Controls.Decorator.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="M:Photon.Controls.Decorator.ComputeChildOffset(Photon.UIElement)">
            <summary>
            Computes the specified <see cref="T:Photon.UIElement"/>'s offset
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> to compute the offset of</param>
            <returns>The <see cref="T:Photon.Media.Point"/> representing the specified <see cref="T:Photon.UIElement"/>'s offset</returns>
        </member>
        <member name="M:Photon.Controls.Decorator.MeasureContents">
            <summary>
            Measures the <see cref="T:Photon.Controls.Decorator"/>'s contents
            </summary>
            <returns>The <see cref="T:Photon.Media.Size"/> of the <see cref="T:Photon.Controls.Decorator"/>'s contents</returns>
        </member>
        <member name="M:Photon.Controls.Decorator.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            When overriden in a class, this method provides means to run code whenever a <see cref="T:Photon.DependencyProperty"/> has changed
            </summary>
            <param name="propertyName">The case sensitive name of the modified property</param>
            <param name="originalValue">An object representing the property's value before the suffered change(s)</param>
            <param name="value">An object representing the property's actual (new) value</param>
        </member>
        <member name="M:Photon.Controls.Decorator.OnRender(Photon.DrawingContext)">
            <summary>
            When overriden in a class, renders the visual
            </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in whihc to render the visual</param>
        </member>
        <member name="T:Photon.Controls.Panel">
            <summary>
            Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects in Windows Presentation Foundation (WPF) applications
            </summary>
        </member>
        <member name="M:Photon.Controls.Panel.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Controls.Panel"/> instance
            </summary>
        </member>
        <member name="P:Photon.Controls.Panel.Children">
            <summary>
            Gets a <see cref="T:Photon.UIElementCollection"/> containing all of the <see cref="T:Photon.Controls.Panel"/>'s children
            </summary>
        </member>
        <member name="P:Photon.Controls.Panel.ContentsAffectsLayout">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Panel"/>'s contents affect its layout
            </summary>
        </member>
        <member name="P:Photon.Controls.Panel.ContentsAlignHorizontally">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Panel"/>'s content can align horizontally
            </summary>
        </member>
        <member name="P:Photon.Controls.Panel.ContentsAlignVertically">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.Panel"/>'s content can align vertically
            </summary>
        </member>
        <member name="M:Photon.Controls.Panel.ComputeChildOffset(Photon.UIElement)">
            <summary>
            Computes the specified <see cref="T:Photon.UIElement"/>'s offset
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> to compute the offset of</param>
            <returns>The <see cref="T:Photon.Media.Point"/> representing the specified <see cref="T:Photon.UIElement"/>'s offset</returns>
        </member>
        <member name="M:Photon.Controls.Panel.MeasureContents">
            <summary>
            Measures the <see cref="T:Photon.Controls.Panel"/>'s contents
            </summary>
            <returns>The <see cref="T:Photon.Media.Size"/> of the <see cref="T:Photon.Controls.Panel"/>'s contents</returns>
        </member>
        <member name="M:Photon.Controls.Panel.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Controls.Panel.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="M:Photon.Controls.Panel.OnChildrenCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the <see cref="P:Photon.Controls.Panel.Children"/>'s <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event
            </summary>
        </member>
        <member name="M:Photon.Controls.Panel.OnChildAdded(Photon.UIElement)">
            <summary>
            When overriden in a class, allows the execution of code whenever a child <see cref="T:Photon.UIElement"/> has been added to the <see cref="T:Photon.Controls.Panel"/>
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> that has been added</param>
        </member>
        <member name="M:Photon.Controls.Panel.OnChildRemoved(Photon.UIElement)">
            <summary>
            When overriden in a class, allows the execution of code whenever a child <see cref="T:Photon.UIElement"/> has been removed from the <see cref="T:Photon.Controls.Panel"/>
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> that has been removed</param>
        </member>
        <member name="M:Photon.Controls.Panel.OnRender(Photon.DrawingContext)">
             <summary>
             When overriden in a class, this method allows the execution of code whenever the element has been rendered
             </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which the element has been rendered</param>
        </member>
        <member name="T:Photon.Controls.Label">
            <summary>
            Represents the text label for a control and provides support for access keys
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.FontFamilyProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.FontFamily"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.FontFamily">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.FontFamily"/> of the <see cref="T:System.Drawing.Font"/> with which to paint the <see cref="T:Photon.Controls.Label"/>'s text
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.FontSizeProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.FontSize"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.FontSize">
            <summary>
            Gets/sets the em size of the <see cref="T:System.Drawing.Font"/> with which to paint the <see cref="T:Photon.Controls.Label"/>'s text
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.FontStyleProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.FontStyle"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.FontStyle">
            <summary>
            Gets/sets the <see cref="T:System.Drawing.FontStyle"/> of the <see cref="T:System.Drawing.Font"/> with which to paint the <see cref="T:Photon.Controls.Label"/>'s text
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.ForegroundProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.Foreground"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.Foreground">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Brush"/> with which to paint the <see cref="T:Photon.Controls.Label"/>'s text
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.PaddingProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.Padding"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.Padding">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Thickness"/> representing the <see cref="T:Photon.Controls.Label"/>'s padding
            </summary>
        </member>
        <member name="F:Photon.Controls.Label.TextProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.Label.Text"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.Text">
            <summary>
            Gets/sets the text displayed by the <see cref="T:Photon.Controls.Label"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.Label.Font">
            <summary>
            Gets the text's <see cref="T:System.Drawing.Font"/>, based on the <see cref="P:Photon.Controls.Label.FontFamily"/>, <see cref="P:Photon.Controls.Label.FontSize"/> and <see cref="P:Photon.Controls.Label.FontStyle"/> properties
            </summary>
        </member>
        <member name="M:Photon.Controls.Label.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Controls.Label.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="M:Photon.Controls.Label.OnRender(Photon.DrawingContext)">
             <summary>
             When overriden in a class, this method allows the execution of code whenever the element has been rendered
             </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which the element has been rendered</param>
        </member>
        <member name="T:Photon.Controls.StackPanel">
            <summary>
            Arranges child elements into a single line that can be oriented horizontally or vertically
            </summary>
        </member>
        <member name="M:Photon.Controls.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.Controls.StackPanel"/> type
            </summary>
        </member>
        <member name="F:Photon.Controls.StackPanel.OffsetProperty">
            <summary>
            Describes the <see cref="F:Photon.Controls.StackPanel.OffsetProperty"/> attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Controls.StackPanel.GetOffset(Photon.UIElement)">
            <summary>
            Gets a <see cref="T:Photon.Media.Point"/> representing the specified <see cref="T:Photon.UIElement"/>'s offset
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to get the offset of</param>
            <returns>A <see cref="T:Photon.Media.Point"/> representing the specified <see cref="T:Photon.UIElement"/>'s offset</returns>
        </member>
        <member name="M:Photon.Controls.StackPanel.SetOffset(Photon.UIElement,Photon.Media.Point)">
            <summary>
            Sets the offset of the specified <see cref="T:Photon.UIElement"/>
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to set the offset of</param>
            <param name="offset">A <see cref="T:Photon.Media.Point"/> representing the <see cref="T:Photon.UIElement"/>'s offset</param>
        </member>
        <member name="F:Photon.Controls.StackPanel.OrientationProperty">
            <summary>
            Describes the <see cref="P:Photon.Controls.StackPanel.Orientation"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.StackPanel.Orientation">
            <summary>
            Gets/sets the <see cref="T:Photon.Controls.StackPanel"/>'s content <see cref="T:Photon.Controls.Orientation"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.StackPanel.ContentsAffectsLayout">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.StackPanel"/>'s contents affect its layout
            </summary>
        </member>
        <member name="P:Photon.Controls.StackPanel.ContentsAlignHorizontally">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.StackPanel"/>'s content can align horizontally
            </summary>
        </member>
        <member name="P:Photon.Controls.StackPanel.ContentsAlignVertically">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Controls.StackPanel"/>'s content can align vertically
            </summary>
        </member>
        <member name="M:Photon.Controls.StackPanel.ComputeChildOffset(Photon.UIElement)">
            <summary>
            Computes the specified <see cref="T:Photon.UIElement"/>'s offset
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> to compute the offset of</param>
            <returns>The <see cref="T:Photon.Media.Point"/> representing the specified <see cref="T:Photon.UIElement"/>'s offset</returns>
        </member>
        <member name="M:Photon.Controls.StackPanel.MeasureContents">
            <summary>
            Measures the <see cref="T:Photon.Controls.Panel"/>'s contents
            </summary>
            <returns>The <see cref="T:Photon.Media.Size"/> of the <see cref="T:Photon.Controls.Panel"/>'s contents</returns>
        </member>
        <member name="M:Photon.Controls.StackPanel.OnChildAdded(Photon.UIElement)">
            <summary>
            When overriden in a class, allows the execution of code whenever a child <see cref="T:Photon.UIElement"/> has been added to the <see cref="T:Photon.Controls.StackPanel"/>
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> that has been added</param>
        </member>
        <member name="M:Photon.Controls.StackPanel.OnChildRemoved(Photon.UIElement)">
            <summary>
            When overriden in a class, allows the execution of code whenever a child <see cref="T:Photon.UIElement"/> has been removed from the <see cref="T:Photon.Controls.StackPanel"/>
            </summary>
            <param name="child">The <see cref="T:Photon.UIElement"/> that has been removed</param>
        </member>
        <member name="M:Photon.Controls.StackPanel.OnRender(Photon.DrawingContext)">
             <summary>
             When overriden in a class, this method allows the execution of code whenever the element has been rendered
             </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which the element has been rendered</param>
        </member>
        <member name="T:Photon.Controls.Orientation">
            <summary>
            Defines the different orientations that a control or layout can have
            </summary>
        </member>
        <member name="F:Photon.Controls.Orientation.Horizontal">
            <summary>
            Control or layout should be horizontally oriented
            </summary>
        </member>
        <member name="F:Photon.Controls.Orientation.Vertical">
            <summary>
            Control or layout should be vertically oriented
            </summary>
        </member>
        <member name="T:Photon.Controls.LayoutInformation">
            <summary>
            Defines methods that provide additional information about the layout state of an element
            </summary>
        </member>
        <member name="M:Photon.Controls.LayoutInformation.GetLayoutClip(Photon.UIElement)">
            <summary>
            Returns a <see cref="T:Photon.Media.Geometry"/> that represents the visible region of a <see cref="T:Photon.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to determine the visible region of</param>
            <returns>A <see cref="T:Photon.Media.Geometry"/> that represents the visible region of a <see cref="T:Photon.UIElement"/>.</returns>
        </member>
        <member name="M:Photon.Controls.LayoutInformation.GetLayoutSlot(Photon.IUIElement)">
            <summary>
            Returns a <see cref="T:Photon.Media.Rectangle"/> that represents the layout partition that is reserved for a child element<para></para>
            It is equivalent to the rectangle returned by the <see cref="P:Photon.IUIElement.RenderTarget"/> property, modified to include eventual padding values
            </summary>
            <param name="element">The <see cref="T:Photon.IUIElement"/> instance to compute the layout slot of</param>
            <returns>A <see cref="T:Photon.Media.Rectangle"/> that represents the layout partition that is reserved for a child element</returns>
        </member>
        <member name="T:Photon.Controls.IContentPresenter">
            <summary>
            This interface is implemented by all <see cref="T:Photon.IUIElement"/> that presents contents, such as other <see cref="T:Photon.UIElement"/>s or text
            </summary>
        </member>
        <member name="P:Photon.Controls.IContentPresenter.ContentsAlignHorizontally">
            <summary>
            Gets a boolean indicating whether or not the element's content can align horizontally
            </summary>
        </member>
        <member name="P:Photon.Controls.IContentPresenter.ContentsAlignVertically">
            <summary>
            Gets a boolean indicating whether or not the element's content can align vertically
            </summary>
        </member>
        <member name="P:Photon.Controls.IContentPresenter.ContentsAffectsLayout">
            <summary>
            Gets a boolean indicating whether or not the contents affects the element's layout
            </summary>
        </member>
        <member name="M:Photon.Controls.IContentPresenter.ComputeChildOffset(Photon.UIElement)">
            <summary>
            Computes the x and y offset for the specified child <see cref="T:Photon.UIElement"/>
            </summary>
            <param name="child">The child for which to compute the offset</param>
            <returns>A <see cref="T:Photon.Media.Point"/> representing the x and y offset of the specified child <see cref="T:Photon.UIElement"/></returns>
        </member>
        <member name="M:Photon.Controls.IContentPresenter.MeasureContents">
            <summary>
            Measures the <see cref="T:Photon.Controls.IContentPresenter"/>'s contents
            </summary>
            <returns>The <see cref="T:Photon.Media.Size"/> of the <see cref="T:Photon.Controls.IContentPresenter"/>'s contents</returns>
        </member>
        <member name="T:Photon.Controls.IDecorator">
            <summary>
            This interface is implemented by all <see cref="T:Photon.IUIElement"/> that decorates a single child
            </summary>
        </member>
        <member name="P:Photon.Controls.IDecorator.Child">
            <summary>
            Gets the element's child <see cref="T:Photon.UIElement"/>
            </summary>
        </member>
        <member name="T:Photon.Controls.IPaddedElement">
            <summary>
            This interfaces is implements by all <see cref="T:Photon.UIElement"/>s that define a padding
            </summary>
        </member>
        <member name="P:Photon.Controls.IPaddedElement.Padding">
            <summary>
            Gets/sets a <see cref="T:Photon.Media.Thickness"/> representing the element's padding
            </summary>
        </member>
        <member name="T:Photon.Controls.IPanel">
            <summary>
            This interface is implemented by all <see cref="T:Photon.UIElement"/> presenting multiple childs
            </summary>
        </member>
        <member name="P:Photon.Controls.IPanel.Children">
            <summary>
            Gets a <see cref="T:Photon.UIElementCollection"/> containing all of the element's children
            </summary>
        </member>
        <member name="T:Photon.Controls.ITextPresenter">
            <summary>
            This interface is implemented by all <see cref="T:Photon.UIElement"/>s that present text
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.Foreground">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Brush"/> with which to render the text
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.FontFamily">
            <summary>
            Gets/sets the text's <see cref="T:Photon.Media.FontFamily"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.FontStyle">
            <summary>
            Gets/sets the text's <see cref="T:System.Drawing.FontStyle"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.FontSize">
            <summary>
            Gets/sets the text's EM size
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.Font">
            <summary>
            Gets the text's <see cref="T:System.Drawing.Font"/>
            </summary>
        </member>
        <member name="P:Photon.Controls.ITextPresenter.Text">
            <summary>
            Gets/sets the text presented by the element
            </summary>
        </member>
        <member name="T:Photon.SetterBase">
            <summary>
            Represents the base class for value setters
            </summary>
        </member>
        <member name="P:Photon.SetterBase.Style">
            <summary>
            Gets the <see cref="T:Photon.SetterBase"/>'s parent <see cref="T:Photon.Style"/>
            </summary>
        </member>
        <member name="P:Photon.SetterBase.IsSealed">
            <summary>
            Gets a boolean indicating whether or not this object is in an immutable state
            </summary>
        </member>
        <member name="M:Photon.SetterBase.Set(Photon.DependencyObject)">
            <summary>
            Applies the <see cref="T:Photon.SetterBase"/> to the specified <see cref="T:Photon.DependencyObject"/>
            </summary>
            <param name="dependencyObject">The <see cref="T:Photon.DependencyObject"/> to apply the <see cref="T:Photon.SetterBase"/> to</param>
        </member>
        <member name="T:Photon.TriggerAction">
            <summary>
            Describes an action to perform for a trigger
            </summary>
        </member>
        <member name="M:Photon.TriggerAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.TriggerAction"/> class
            </summary>
        </member>
        <member name="T:Photon.TriggerBase">
            <summary>
            Represents the base class for specifying a conditional value within a <see cref="T:Photon.Style"/> object.
            </summary>
        </member>
        <member name="M:Photon.TriggerBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.TriggerBase"/> instance
            </summary>
        </member>
        <member name="P:Photon.TriggerBase.EnterActions">
            <summary>
            Gets a collection of <see cref="T:Photon.TriggerAction"/> objects to apply when the trigger object becomes active. This property does not apply to the <see cref="T:Photon.EventTrigger"/> class
            </summary>
        </member>
        <member name="P:Photon.TriggerBase.Actions">
            <summary>
            Gets the collection of actions to apply when the event occurs
            </summary>
        </member>
        <member name="P:Photon.TriggerBase.ExitActions">
            <summary>
            Gets a collection of <see cref="T:Photon.TriggerAction"/> objects to apply when the trigger object becomes inactive. This property does not apply to the <see cref="T:Photon.EventTrigger"/> class
            </summary>
        </member>
        <member name="T:Photon.SetterBaseCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.SetterBase"/> objects.
            </summary>
        </member>
        <member name="T:Photon.TriggerActionCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.TriggerAction"/> objects
            </summary>
        </member>
        <member name="T:Photon.TriggerBaseCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.TriggerBase"/> objects
            </summary>
        </member>
        <member name="T:Photon.Application">
            <summary>
            Encapsulates a Photon application
            </summary>
        </member>
        <member name="F:Photon.Application.DEFAULT_UPDATE_FREQUENCY">
            <summary>
            The default frequency, in milliseconds, at which the application will check for events
            </summary>
        </member>
        <member name="E:Photon.Application.Startup">
            <summary>
            This event is fired on <see cref="T:Photon.Application"/> start up
            </summary>
        </member>
        <member name="E:Photon.Application.Exit">
            <summary>
            This event is fired when the <see cref="T:Photon.Application"/> shuts down
            </summary>
        </member>
        <member name="M:Photon.Application.#ctor">
            <summary>
            The default constructor for the <see cref="T:Photon.Application"/> class
            </summary>
        </member>
        <member name="P:Photon.Application.StartupArguments">
            <summary>
            Gets an array of string representing the application's statup arguments
            </summary>
        </member>
        <member name="P:Photon.Application.StartupUri">
            <summary>
            Gets/sets the <see cref="T:System.Uri"/> of application's startup <see cref="T:Photon.IUIElement"/>
            </summary>
        </member>
        <member name="P:Photon.Application.StartupUriString">
            <summary>
            Gets/sets the string from which the <see cref="P:Photon.Application.StartupUri"/> is created
            </summary>
        </member>
        <member name="P:Photon.Application.ShutdownMode">
            <summary>
            Gets/sets the application's <see cref="T:Photon.ShutdownMode"/>
            </summary>
        </member>
        <member name="P:Photon.Application.State">
            <summary>
            Gets the application's <see cref="T:Photon.ApplicationState"/>
            </summary>
        </member>
        <member name="P:Photon.Application.MainWindow">
            <summary>
            Gets/sets the application's main <see cref="T:Photon.Window"/>
            </summary>
        </member>
        <member name="P:Photon.Application.Windows">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing all the application's active <see cref="T:Photon.Window"/>s
            </summary>
        </member>
        <member name="M:Photon.Application.RegisterWindow(Photon.Window)">
            <summary>
            Registers the specified <see cref="T:Photon.Window"/>
            </summary>
            <param name="window">The <see cref="T:Photon.Window"/> to register</param>
        </member>
        <member name="M:Photon.Application.Run">
            <summary>
            Starts the application
            </summary>
        </member>
        <member name="M:Photon.Application.Shutdown">
            <summary>
            Shuts the application down
            </summary>
        </member>
        <member name="M:Photon.Application.OnStartup">
            <summary>
            When overriden in a class, allows the execution of code when the application is starting up
            </summary>
        </member>
        <member name="M:Photon.Application.OnWindowCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the <see cref="P:Photon.Application.Windows"/>'s <see cref="E:Photon.ObservableHashSet`1.CollectionChanged"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The <see cref="T:System.EventArgs"/> associated with the event</param>
        </member>
        <member name="M:Photon.Application.OnWindowClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Photon.Window.Closed"/> event of the application's registered, active <see cref="T:Photon.Window"/>s
            </summary>
            <param name="sender">The event's sender</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Application.OnExit">
            <summary>
            When overriden in a class, allows the execution of code when the application is exiting
            </summary>
        </member>
        <member name="P:Photon.Application.Current">
            <summary>
            Gets the current <see cref="T:Photon.Application"/>
            </summary>
        </member>
        <member name="M:Photon.Application.GetResourceStream(System.Uri)">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> of the specified resource
            </summary>
            <param name="resourceUri">The resource's <see cref="T:System.Uri"/></param>
            <returns>The specified resource's <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="M:Photon.Application.Start``1(System.String[])">
            <summary>
            Starts a new application fo the specified type
            </summary>
            <typeparam name="TApplication">The type of the application to create</typeparam>
            <param name="startupArguments">An array of string representing the application's startup arguments</param>
        </member>
        <member name="T:Photon.EventSetter">
            <summary>
            Represents an event setter in a <see cref="T:Photon.Style"/>. Event setters invoke the specified event handlers in response to events
            </summary>
        </member>
        <member name="M:Photon.EventSetter.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.EventSetter"/> instance
            </summary>
        </member>
        <member name="P:Photon.EventSetter.Event">
            <summary>
            Gets or sets the particular <see cref="T:Photon.RoutedEvent"/> that the <see cref="T:Photon.EventSetter"/> responds to
            </summary>
        </member>
        <member name="P:Photon.EventSetter.Handler">
            <summary>
            Gets or sets the reference to a handler for a routed event in the <see cref="T:Photon.Setter"/>
            </summary>
        </member>
        <member name="M:Photon.EventSetter.Set(Photon.DependencyObject)">
            <summary>
            Applies the <see cref="T:Photon.EventSetter"/> to the specified <see cref="T:Photon.DependencyObject"/>
            </summary>
            <param name="dependencyObject">The <see cref="T:Photon.DependencyObject"/> to apply the <see cref="T:Photon.EventSetter"/> to</param>
        </member>
        <member name="T:Photon.EventTrigger">
            <summary>
            Represents a trigger that applies a set of actions in response to an event
            </summary>
        </member>
        <member name="M:Photon.EventTrigger.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.EventTrigger"/> instance
            </summary>
        </member>
        <member name="M:Photon.EventTrigger.#ctor(Photon.RoutedEvent)">
            <summary>
            Initializes a new <see cref="T:Photon.EventTrigger"/> for the specified <see cref="P:Photon.EventTrigger.RoutedEvent"/>
            </summary>
            <param name="routedEvent">The <see cref="P:Photon.EventTrigger.RoutedEvent"/> that will activate the trigger</param>
        </member>
        <member name="P:Photon.EventTrigger.RoutedEvent">
            <summary>
            Gets or sets the <see cref="P:Photon.EventTrigger.RoutedEvent"/> that will activate the trigger
            </summary>
        </member>
        <member name="T:Photon.ResourceDictionary">
            <summary>
            Provides a dictionary implementation that contains Photon resources used by components and other elements of a Photon application
            </summary>
        </member>
        <member name="M:Photon.ResourceDictionary.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="F:Photon.ResourceDictionary._Resources">
            <summary>
            The dictionary containing all locally registered resources
            </summary>
        </member>
        <member name="P:Photon.ResourceDictionary.Item(System.String)">
            <summary>
            Gets/sets the value for the specified key
            </summary>
            <param name="key">The key of the value to get/set</param>
            <returns>An object representing the value for the specified key</returns>
        </member>
        <member name="P:Photon.ResourceDictionary.Count">
            <summary>
            Gets the <see cref="T:Photon.ResourceDictionary"/>'s element count
            </summary>
        </member>
        <member name="P:Photon.ResourceDictionary.IsReadOnly">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.ResourceDictionary"/> is read-only
            </summary>
        </member>
        <member name="P:Photon.ResourceDictionary.Keys">
            <summary>
            Gets a collection of the keys contained by the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="P:Photon.ResourceDictionary.Values">
            <summary>
            Gets a collection of the values contained by the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="P:Photon.ResourceDictionary.MergedDictionaries">
            <summary>
            Gets a collection of the <see cref="T:Photon.ResourceDictionary"/> instances contained by the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="M:Photon.ResourceDictionary.ContainsKey(System.String)">
            <summary>
            Returns a boolean indicating whether or not the <see cref="T:Photon.ResourceDictionary"/> contains the specified key
            </summary>
            <param name="key">The key to check for</param>
            <returns>A boolean indicating whether or not the <see cref="T:Photon.ResourceDictionary"/> contains the specified key</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Returns a boolean indicating whether or not the <see cref="T:Photon.ResourceDictionary"/> contains the specified item
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to check for existence</param>
            <returns>A boolean indicating whether or not the <see cref="T:Photon.ResourceDictionary"/> contains the specified item</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
            <param name="key">The key to add</param>
            <param name="value">The value associated with the key</param>
        </member>
        <member name="M:Photon.ResourceDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item to the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add</param>
        </member>
        <member name="M:Photon.ResourceDictionary.Remove(System.String)">
            <summary>
            Removes the item with the specified key from the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
            <param name="key">The key of the item to remove</param>
            <returns>A boolean indicating whether or not the item with the specified key could be removed</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item from the <see cref="T:Photon.ResourceDictionary"/>
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to remove</param>
            <returns>A boolean indicating whether or not the specified item could be removed</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.Clear">
            <summary>
            Clears the <see cref="T:Photon.ResourceDictionary"/> of its contents
            </summary>
        </member>
        <member name="M:Photon.ResourceDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the contents of the <see cref="T:Photon.ResourceDictionary"/> into the specified <see cref="T:System.Collections.Generic.KeyValuePair`2"/> array, starting at the specified index
            </summary>
            <param name="array">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> array into which to copy the <see cref="T:Photon.ResourceDictionary"/></param>
            <param name="arrayIndex">The index starting at which to start copying from the <see cref="T:Photon.ResourceDictionary"/>'s contents</param>
        </member>
        <member name="M:Photon.ResourceDictionary.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:Photon.ResourceDictionary"/> contents
            </summary>
            <returns>An enumerator for the <see cref="T:Photon.ResourceDictionary"/> contents</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:Photon.ResourceDictionary"/> contents
            </summary>
            <returns>An enumerator for the <see cref="T:Photon.ResourceDictionary"/> contents</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to retrieve the value associated with the specified key and return a boolean indicating whether or not the attempt was successfull
            </summary>
            <param name="key">The key associated with the value to retrieve</param>
            <param name="value">The value associated with the specified key, if the key exists</param>
            <returns>A boolean indicating whether or not the attempt was successfull</returns>
        </member>
        <member name="M:Photon.ResourceDictionary.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.ResourceDictionary.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="T:Photon.RoutedEvent">
            <summary>
            Represents and identifies a routed event and declares its characteristics
            </summary>
        </member>
        <member name="M:Photon.RoutedEvent.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new <see cref="T:Photon.RoutedEvent"/> instance based on the specified handler type and name
            </summary>
            <param name="handlerType">The handler type of the <see cref="T:Photon.RoutedEvent"/></param>
            <param name="name">The identifying name of the <see cref="T:Photon.RoutedEvent"/></param>
        </member>
        <member name="P:Photon.RoutedEvent.HandlerType">
            <summary>
            Gets the handler type of the <see cref="T:Photon.RoutedEvent"/>
            </summary>
        </member>
        <member name="P:Photon.RoutedEvent.Name">
            <summary>
            Gets the identifying name of the <see cref="T:Photon.RoutedEvent"/>
            </summary>
        </member>
        <member name="T:Photon.Setter">
            <summary>
            Represents a setter that applies a property value
            </summary>
        </member>
        <member name="M:Photon.Setter.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Setter"/> instance
            </summary>
        </member>
        <member name="M:Photon.Setter.#ctor(Photon.DependencyProperty,System.Object)">
            <summary>
            Initializes a new <see cref="T:Photon.Setter"/> instance with the specified property and value
            </summary>
            <param name="property">The <see cref="T:Photon.DependencyProperty"/> to which the Value will be applied</param>
            <param name="value">The value to apply to the specified property</param>
        </member>
        <member name="M:Photon.Setter.#ctor(Photon.DependencyProperty,System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Photon.Setter"/> instance with the specified property, value and target name
            </summary>
            <param name="property">The <see cref="T:Photon.DependencyProperty"/> to which the Value will be applied</param>
            <param name="value">The value to apply to the specified property</param>
            <param name="targetName">The name of the object the <see cref="T:Photon.Setter"/> is intended for</param>
        </member>
        <member name="P:Photon.Setter.Property">
            <summary>
            Gets or sets the <see cref="T:Photon.DependencyProperty"/> to which the Value will be applied
            </summary>
        </member>
        <member name="P:Photon.Setter.TargetName">
            <summary>
            Gets or sets the name of the object the <see cref="T:Photon.Setter"/> is intended for
            </summary>
        </member>
        <member name="P:Photon.Setter.Value">
            <summary>
            Gets or sets the value to apply to the property that is specified by the <see cref="T:Photon.Setter"/>
            </summary>
        </member>
        <member name="M:Photon.Setter.Set(Photon.DependencyObject)">
            <summary>
            Applies the <see cref="T:Photon.Setter"/> to the specified <see cref="T:Photon.DependencyObject"/>
            </summary>
            <param name="dependencyObject">The <see cref="T:Photon.DependencyObject"/> to apply the <see cref="T:Photon.Setter"/> to</param>
        </member>
        <member name="T:Photon.Style">
            <summary>
            Enables the sharing of properties, resources, and event handlers between instances of a type
            </summary>
        </member>
        <member name="M:Photon.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.Style"/> class
            </summary>
        </member>
        <member name="M:Photon.Style.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Photon.Style"/> instance to use on the specified type
            </summary>
            <param name="targetType">The element type the <see cref="T:Photon.Style"/> targets</param>
        </member>
        <member name="M:Photon.Style.#ctor(System.Type,Photon.Style)">
            <summary>
            Initializes a new <see cref="T:Photon.Style"/> instance based on the specified <see cref="T:Photon.Style"/>
            </summary>
            <param name="targetType">The element type the <see cref="T:Photon.Style"/> targets</param>
            <param name="style">The <see cref="T:Photon.Style"/>'s base <see cref="T:Photon.Style"/></param>
        </member>
        <member name="P:Photon.Style.TargetType">
            <summary>
            Gets or sets the type for which this style is intended
            </summary>
        </member>
        <member name="P:Photon.Style.Setters">
            <summary>
            Gets a collection of Setter and EventSetter objects
            </summary>
        </member>
        <member name="P:Photon.Style.Triggers">
            <summary>
            Gets a collection of <see cref="T:Photon.TriggerBase"/> objects that apply property values based on specified conditions
            </summary>
        </member>
        <member name="M:Photon.Style.ApplyTo(Photon.DependencyObject)">
            <summary>
            Applies the <see cref="T:Photon.Style"/> to the specified <see cref="T:Photon.DependencyObject"/>
            </summary>
            <param name="dependencyObject">The <see cref="T:Photon.DependencyObject"/> to apply the <see cref="T:Photon.Style"/> to</param>
        </member>
        <member name="M:Photon.Style.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Style.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="T:Photon.DependencyElementTree">
            <summary>
            Represents the <see cref="T:Photon.DependencyObject"/>s tree of a given <see cref="T:Photon.IUIElement"/>
            </summary>
        </member>
        <member name="M:Photon.DependencyElementTree.#ctor(Photon.DependencyObject)">
            <summary>
            Initializes a new <see cref="T:Photon.DependencyElementTree"/> instance based on the specified root <see cref="T:Photon.IUIElement"/>
            </summary>
            <param name="root">The root <see cref="T:Photon.IUIElement"/> of the <see cref="T:Photon.DependencyElementTree"/></param>
        </member>
        <member name="P:Photon.DependencyElementTree.Root">
            <summary>
            Gets the <see cref="T:Photon.DependencyElementTree"/>'s root <see cref="T:Photon.DependencyObject"/>
            </summary>
        </member>
        <member name="T:Photon.Window">
            <summary>
            Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes
            </summary>
        </member>
        <member name="F:Photon.Window.DEFAULT_TITLE">
            <summary>
            The default title for a <see cref="T:Photon.Window"/>
            </summary>
        </member>
        <member name="F:Photon.Window.DEFAULT_WIDTH">
            <summary>
            The default width of a window
            </summary>
        </member>
        <member name="F:Photon.Window.DEFAULT_HEIGHT">
            <summary>
            The default height of a window
            </summary>
        </member>
        <member name="F:Photon.Window.DEFAULT_UDATES_PER_SECOND">
            <summary>
            The default updates per second of a window
            </summary>
        </member>
        <member name="F:Photon.Window.DEFAULT_FRAMES_PER_SECOND">
            <summary>
            The default fps of a window
            </summary>
        </member>
        <member name="E:Photon.Window.Loaded">
            <summary>
            This event is fired whenever the window is loaded
            </summary>
        </member>
        <member name="E:Photon.Window.Closing">
            <summary>
            This event is fired when the window is closing
            </summary>
        </member>
        <member name="E:Photon.Window.Closed">
            <summary>
            This event is fired whenever the window is closed
            </summary>
        </member>
        <member name="E:Photon.Window.MouseMove">
            <summary>
            This event is fired every time the mouse moves
            </summary>
        </member>
        <member name="E:Photon.Window.MouseButtonDown">
            <summary>
            This event is fired every time a mouse button is down
            </summary>
        </member>
        <member name="E:Photon.Window.MouseButtonUp">
            <summary>
            This event is fired every time a mouse button is up
            </summary>
        </member>
        <member name="E:Photon.Window.MouseLeftButtonDown">
            <summary>
            This event is fired every time the left mouse button is down
            </summary>
        </member>
        <member name="E:Photon.Window.MouseLeftButtonUp">
            <summary>
            This event is fired every time the left mouse button is up
            </summary>
        </member>
        <member name="E:Photon.Window.MouseMiddleButtonDown">
            <summary>
            This event is fired every time the middle mouse button is down
            </summary>
        </member>
        <member name="E:Photon.Window.MouseMiddleButtonUp">
            <summary>
            This event is fired every time the middle mouse button is up
            </summary>
        </member>
        <member name="E:Photon.Window.MouseRightButtonDown">
            <summary>
            This event is fired every time the right mouse button is down
            </summary>
        </member>
        <member name="E:Photon.Window.MouseRightButtonUp">
            <summary>
            This event is fired every time the right mouse button is up
            </summary>
        </member>
        <member name="E:Photon.Window.MouseWheel">
            <summary>
            This event is fired every time the mouse wheel is used
            </summary>
        </member>
        <member name="E:Photon.Window.KeyDown">
            <summary>
            This event is fired every time a key is down
            </summary>
        </member>
        <member name="E:Photon.Window.KeyUp">
            <summary>
            This event is fired every time a key is up
            </summary>
        </member>
        <member name="E:Photon.Window.KeyPressed">
            <summary>
            This event is fired every time a key is pressed
            </summary>
        </member>
        <member name="E:Photon.Window.VisibilityChanged">
            <summary>
            This event is fired every time the window's visibility has changed
            </summary>
        </member>
        <member name="E:Photon.Window.GotFocus">
            <summary>
            This event is fired every time the window gets focus
            </summary>
        </member>
        <member name="E:Photon.Window.LostFocus">
            <summary>
            This event is fired every time the window looses focus
            </summary>
        </member>
        <member name="M:Photon.Window.#ctor">
            <summary>
            The default constructor for the <see cref="T:Photon.Window"/> class
            </summary>
        </member>
        <member name="P:Photon.Window.DrawingContext">
            <summary>
            Gets the window's <see cref="T:Photon.DrawingContext"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Hwnd">
            <summary>
            Gets the window's underlying <see cref="T:OpenTK.GameWindow"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Resources">
            <summary>
            Gets/sets the <see cref="T:Photon.Window"/>'s <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="F:Photon.Window.StyleProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Style"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Style">
            <summary>
            Gets/sets the <see cref="T:Photon.Window"/>'s <see cref="P:Photon.Window.Style"/>
            </summary>
        </member>
        <member name="F:Photon.Window.TitleProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Title"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Title">
            <summary>
            Gets/sets the window's title
            </summary>
        </member>
        <member name="F:Photon.Window.WidthProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Width"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Width">
            <summary>
            Gets/sets the window's width
            </summary>
        </member>
        <member name="F:Photon.Window.HeightProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Height"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Height">
            <summary>
            Gets/sets the window's height
            </summary>
        </member>
        <member name="F:Photon.Window.BackgroundProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Background"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Background">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Brush"/> used to paint the window's background
            </summary>
        </member>
        <member name="F:Photon.Window.IsHitTestVisibleProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.IsHitTestVisible"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.IsHitTestVisible">
            <summary>
            Gets/sets a boolean indicating whether or not the window is hit test visible
            </summary>
        </member>
        <member name="F:Photon.Window.ChildProperty">
            <summary>
            Describes the <see cref="P:Photon.Window.Child"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Window.Child">
            <summary>
            Gets/sets the window's child <see cref="T:Photon.UIElement"/>
            </summary>
        </member>
        <member name="P:Photon.Window.ContentsAffectsLayout">
            <summary>
            Gets/sets a boolean indicating whether or not the window's contents affect its layout
            </summary>
        </member>
        <member name="P:Photon.Window.ContentsSize">
            <summary>
            Gets the window's contents <see cref="T:Photon.Media.Size"/>
            </summary>
        </member>
        <member name="P:Photon.Window.LayoutTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the position and size of the window's layout
            </summary>
        </member>
        <member name="P:Photon.Window.RenderTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the position and size of the window's render target
            </summary>
        </member>
        <member name="P:Photon.Window.ContentsAlignHorizontally">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Window"/>'s content can align horizontally
            </summary>
        </member>
        <member name="P:Photon.Window.ContentsAlignVertically">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Window"/>'s content can align vertically
            </summary>
        </member>
        <member name="M:Photon.Window.Initialize">
            <summary>
            Initializes the <see cref="T:Photon.Window"/>
            </summary>
        </member>
        <member name="M:Photon.Window.InitializeHwnd">
            <summary>
            Initializes the <see cref="T:Photon.Window"/>'s underlying <see cref="T:OpenTK.GameWindow"/> object
            </summary>
        </member>
        <member name="M:Photon.Window.Show">
            <summary>
            Shows the window
            </summary>
        </member>
        <member name="M:Photon.Window.ShowDialog">
            <summary>
            Show the window as a dialog, meaning the UI will block until the dialog closes or returns a value
            </summary>
        </member>
        <member name="M:Photon.Window.Hide">
            <summary>
            Hides the window
            </summary>
        </member>
        <member name="M:Photon.Window.Close">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="M:Photon.Window.ComputeChildOffset(Photon.UIElement)">
            <summary>
            Computes the x and y offset of the specified window's child <see cref="T:Photon.UIElement"/>
            </summary>
            <param name="child">The window's child <see cref="T:Photon.UIElement"/> for whihc to compute the offset</param>
            <returns>A <see cref="T:Photon.Media.Point"/> representing the window's child x and y offset</returns>
        </member>
        <member name="M:Photon.Window.ProcessUIEvent(Photon.Input.UIEventArgs)">
            <summary>
            Processes the <see cref="T:Photon.Input.UIEvent"/> specified by the <see cref="T:Photon.Input.UIEventArgs"/> passed as parameter
            </summary>
            <param name="e">The <see cref="T:Photon.Input.UIEventArgs"/> associated with the <see cref="T:Photon.Input.UIEvent"/> to process</param>
        </member>
        <member name="M:Photon.Window.SetCursor(Photon.Media.MouseCursor)">
            <summary>
            Sets the mouse cursor
            </summary>
            <param name="cursor">The <see cref="T:Photon.Media.MouseCursor"/> to set</param>
        </member>
        <member name="M:Photon.Window.MeasureContents">
            <summary>
            Measures the <see cref="T:Photon.Window"/>'s contents
            </summary>
            <returns>The <see cref="T:Photon.Media.Size"/> of the <see cref="T:Photon.Window"/>'s contents</returns>
        </member>
        <member name="M:Photon.Window.AddChild(System.Object)">
            <summary>
            Adds the specified child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Window.AddText(System.String)">
            <summary>
            Adds the specified text content
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="M:Photon.Window.InvalidateLayout">
            <summary>
            Invalidates the window's layout
            </summary>
        </member>
        <member name="M:Photon.Window.InvalidateVisual">
            <summary>
            Invalidates the window's visual, forcing it to redraw
            </summary>
        </member>
        <member name="M:Photon.Window.OnHwndLoad(System.Object,System.EventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.GameWindow.Load"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndUpdateFrame(System.Object,OpenTK.FrameEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.GameWindow.UpdateFrame"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndRenderFrame(System.Object,OpenTK.FrameEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.GameWindow.RenderFrame"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndMouseMove(System.Object,OpenTK.Input.MouseMoveEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.MouseMove"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndMouseButtonDown(System.Object,OpenTK.Input.MouseButtonEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.MouseDown"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndMouseButtonUp(System.Object,OpenTK.Input.MouseButtonEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.MouseUp"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndMouseWheel(System.Object,OpenTK.Input.MouseWheelEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.MouseWheel"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndKeyDown(System.Object,OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.KeyDown"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndKeyUp(System.Object,OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.KeyUp"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndKeyPress(System.Object,OpenTK.KeyPressEventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.KeyPress"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndResize(System.Object,System.EventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.Resize"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndClosing(System.Object,System.EventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.Closing"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnHwndClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the underlying <see cref="E:OpenTK.NativeWindow.Closed"/> event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Photon.Window.OnInitialized">
            <summary>
            When overriden in a class, this method provides means to run code whenever the <see cref="T:Photon.Window"/> has been initialized
            </summary>
        </member>
        <member name="M:Photon.Window.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Handles the <see cref="E:Photon.DependencyObject.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The dependency property's name</param>
            <param name="originalValue">The dependency property's original value</param>
            <param name="value">The dependency property's new value</param>
        </member>
        <member name="M:Photon.Window.OnRender(Photon.DrawingContext)">
            <summary>
            When overriden in a class, renders the window in the specified <see cref="T:Photon.DrawingContext"/>
            </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which to render the window</param>
        </member>
        <member name="M:Photon.Window.GetWindow(Photon.UIElement)">
            <summary>
            Retrieves the <see cref="T:Photon.Window"/> to which the specified <see cref="T:Photon.UIElement"/> belongs
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to retrieve the parent <see cref="T:Photon.Window"/> of</param>
            <returns>The <see cref="T:Photon.Window"/> the specified <see cref="T:Photon.UIElement"/> belongs to</returns>
        </member>
        <member name="T:Photon.IBorderedElement">
            <summary>
            This interface is implemented by all <see cref="T:Photon.IUIElement"/>s that define a border
            </summary>
        </member>
        <member name="P:Photon.IBorderedElement.BorderBrush">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Brush"/> with which to paint the element's borders
            </summary>
        </member>
        <member name="P:Photon.IBorderedElement.BorderThickness">
            <summary>
            Gets/sets the <see cref="T:Photon.Media.Thickness"/> of the element's border
            </summary>
        </member>
        <member name="T:Photon.DependencyObject">
            <summary>
            Represents an object that participates in the dependency property system
            </summary>
        </member>
        <member name="E:Photon.DependencyObject.PropertyChanged">
            <summary>
            This event is fired every time one of the DepencyObject's property has been changed
            </summary>
        </member>
        <member name="M:Photon.DependencyObject.#ctor">
            <summary>
            The parameterless constructor for the <see cref="T:Photon.DependencyObject"/> type
            </summary>
        </member>
        <member name="P:Photon.DependencyObject.DependencyProperties">
            <summary>
            Gets a dictionary containing a list of all the <see cref="T:Photon.DependencyProperty"/> contained by the <see cref="T:Photon.DependencyObject"/>
            </summary>
        </member>
        <member name="P:Photon.DependencyObject.AnimationClocks">
            <summary>
            Gets a list containing a list of all the <see cref="T:Photon.Media.Animations.AnimationClock"/> attached to the <see cref="T:Photon.DependencyObject"/>
            </summary>
        </member>
        <member name="M:Photon.DependencyObject.GetValue(System.String)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyObject.GetValue(Photon.DependencyProperty)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyObject.GetValue``1(System.String)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <typeparam name="TResult">The expected type of the returned value</typeparam>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyObject.GetValue``1(Photon.DependencyProperty)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <typeparam name="TResult">The expected type of the returned value</typeparam>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyObject.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <param name="value">The value to set the property with</param>
        </member>
        <member name="M:Photon.DependencyObject.SetValue(Photon.DependencyProperty,System.Object)">
            <summary>
            Sets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <param name="value">The value to set the property with</param>
        </member>
        <member name="M:Photon.DependencyObject.NotifyPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            This method notifies any changes suffered by a given <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="propertyName">The case sensitive name of the modified property</param>
            <param name="originalValue">An object representing the property's value before the suffered change(s)</param>
            <param name="newValue">An object representing the property's actual (new) value</param>
        </member>
        <member name="M:Photon.DependencyObject.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            When overriden in a class, this method provides means to run code whenever a <see cref="T:Photon.DependencyProperty"/> has changed
            </summary>
            <param name="propertyName">The case sensitive name of the modified property</param>
            <param name="originalValue">An object representing the property's value before the suffered change(s)</param>
            <param name="value">An object representing the property's actual (new) value</param>
        </member>
        <member name="M:Photon.DependencyObject.GetDepencyProperties(System.Type)">
            <summary>
            This static method searches the specified type for all <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="depencyObjectType">The type of the <see cref="T:Photon.DependencyObject"/> to search for <see cref="T:Photon.DependencyProperty"/></param>
            <returns>A dictionary of <see cref="T:Photon.DependencyProperty"/></returns>
        </member>
        <member name="T:Photon.UIElement">
            <summary>
            UIElement is a base class for core level implementations building on Photon elements and basic presentation characteristics.
            </summary>
        </member>
        <member name="E:Photon.UIElement.LayoutInvalidated">
            <summary>
            This event is fired every time the element's layout is invalidated
            </summary>
        </member>
        <member name="E:Photon.UIElement.VisualInvalidated">
            <summary>
            This event is fired every time the element's visual is invalidated
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseMove">
            <summary>
            This event is fired every time the mouse moves over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseEnter">
            <summary>
            This event is fired every time the mouse enters the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseLeave">
            <summary>
            This event is fired every time the mouse leaves the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseButtonDown">
            <summary>
            This event is fired every time a mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseButtonUp">
            <summary>
            This event is fired every time a mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseLeftButtonDown">
            <summary>
            This event is fired every time the left mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseLeftButtonUp">
            <summary>
            This event is fired every time the left mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseMiddleButtonDown">
            <summary>
            This event is fired every time the middle mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseMiddleButtonUp">
            <summary>
            This event is fired every time the middle mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseRightButtonDown">
            <summary>
            This event is fired every time the right mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseRightButtonUp">
            <summary>
            This event is fired every time the right mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.MouseWheel">
            <summary>
            This event is fired every time the mouse wheel is used over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.KeyDown">
            <summary>
            This event is fired every time a key is down over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.KeyUp">
            <summary>
            This event is fired every time a key is up over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.KeyPressed">
            <summary>
            This event is fired every time a key is pressed over the element
            </summary>
        </member>
        <member name="E:Photon.UIElement.VisibilityChanged">
            <summary>
            This event is fired every time the element's visibility has changed
            </summary>
        </member>
        <member name="E:Photon.UIElement.GotFocus">
            <summary>
            This event is fired every time the element gets focus
            </summary>
        </member>
        <member name="E:Photon.UIElement.LostFocus">
            <summary>
            This event is fired every time the element looses focus
            </summary>
        </member>
        <member name="M:Photon.UIElement.#ctor">
            <summary>
            The default, parameterless constructor for the <see cref="T:Photon.UIElement"/> type
            </summary>
        </member>
        <member name="P:Photon.UIElement.Parent">
            <summary>
            Gets/Sets the <see cref="T:Photon.Controls.IContentPresenter"/>'s logical parent 
            </summary>
        </member>
        <member name="P:Photon.UIElement.Resources">
            <summary>
            Gets/sets the <see cref="T:Photon.UIElement"/>'s <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.IsLoaded">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.UIElement"/> has been loaded
            </summary>
        </member>
        <member name="F:Photon.UIElement.StyleProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Style"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Style">
            <summary>
            Gets/sets the <see cref="T:Photon.UIElement"/>'s style
            </summary>
        </member>
        <member name="F:Photon.UIElement.HorizontalAlignmentProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.HorizontalAlignment"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.HorizontalAlignment">
            <summary>
            Gets/Sets the element's <see cref="P:Photon.UIElement.HorizontalAlignment"/>
            </summary>
        </member>
        <member name="F:Photon.UIElement.VerticalAlignmentProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.VerticalAlignment"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.VerticalAlignment">
            <summary>
            Gets/Sets the element's <see cref="P:Photon.UIElement.VerticalAlignment"/>
            </summary>
        </member>
        <member name="F:Photon.UIElement.WidthProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Width"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Width">
            <summary>
            Gets/Sets the element's width
            </summary>
        </member>
        <member name="F:Photon.UIElement.MinWidthProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.MinWidth"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.MinWidth">
            <summary>
            Gets/Sets the element's minimal width
            </summary>
        </member>
        <member name="F:Photon.UIElement.MaxWidthProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.MaxWidth"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.MaxWidth">
            <summary>
            Gets/Sets the element's maximal width
            </summary>
        </member>
        <member name="F:Photon.UIElement.HeightProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Height"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Height">
            <summary>
            Gets/Sets the element's height
            </summary>
        </member>
        <member name="F:Photon.UIElement.MinHeightProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.MinHeight"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.MinHeight">
            <summary>
            Gets/Sets the element's minimal height
            </summary>
        </member>
        <member name="F:Photon.UIElement.MaxHeightProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.MaxHeight"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.MaxHeight">
            <summary>
            Gets/Sets the element's maximal height
            </summary>
        </member>
        <member name="F:Photon.UIElement.BackgroundProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Background"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Background">
            <summary>
            Gets/Sets the element's background
            </summary>
        </member>
        <member name="F:Photon.UIElement.MarginProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Margin"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Margin">
            <summary>
            Gets/Sets the element's margin
            </summary>
        </member>
        <member name="F:Photon.UIElement.CursorProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Cursor"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Cursor">
            <summary>
            Gets/Sets the mouse cursor when over the element
            </summary>
        </member>
        <member name="F:Photon.UIElement.OpacityProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Opacity"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Opacity">
            <summary>
            Gets/Sets the element's opacity
            </summary>
        </member>
        <member name="F:Photon.UIElement.VisibilityProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.Visibility"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.Visibility">
            <summary>
            Gets/Sets the element's <see cref="P:Photon.UIElement.Visibility"/>
            </summary>
        </member>
        <member name="F:Photon.UIElement.IsMouseOverProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.IsMouseOver"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.IsMouseOver">
            <summary>
            Gets/Sets a value indicating whether or not the mouse is currently over the element
            </summary>
        </member>
        <member name="F:Photon.UIElement.IsHitTestVisibleProperty">
            <summary>
            Describes the <see cref="P:Photon.UIElement.IsHitTestVisible"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.UIElement.IsHitTestVisible">
            <summary>
            Gets/Sets a value indicating whether or not the element is hit test visible
            </summary>
        </member>
        <member name="P:Photon.UIElement.IsFocusable">
            <summary>
            Gets/Sets a value indicating whether or not the element can be focused
            </summary>
        </member>
        <member name="P:Photon.UIElement.HasParent">
            <summary>
            Gets a value indicating whether or not the element has a parent and is within a visual tree
            </summary>
        </member>
        <member name="P:Photon.UIElement.LayoutPosition">
            <summary>
            Gets a <see cref="T:Photon.Media.Point"/> representing the element's layout position
            </summary>
        </member>
        <member name="P:Photon.UIElement.LayoutSize">
            <summary>
            Gets a <see cref="T:Photon.Media.Size"/> representing the element's layout size
            </summary>
        </member>
        <member name="P:Photon.UIElement.LayoutTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the element's layout target
            </summary>
        </member>
        <member name="P:Photon.UIElement.RenderPosition">
            <summary>
            Gets a <see cref="T:Photon.Media.Point"/> representing the element's render position
            </summary>
        </member>
        <member name="P:Photon.UIElement.RenderSize">
            <summary>
            Gets a <see cref="T:Photon.Media.Size"/> representing the element's render size
            </summary>
        </member>
        <member name="P:Photon.UIElement.RenderTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the element's render target
            </summary>
        </member>
        <member name="P:Photon.UIElement.ActualWidth">
            <summary>
            Gets the element's actual width
            </summary>
        </member>
        <member name="P:Photon.UIElement.ActualHeight">
            <summary>
            Gets the element's actual height
            </summary>
        </member>
        <member name="P:Photon.UIElement.LastInvalidated">
            <summary>
            Gets/Sets the date and time at which the element has last been invalidated
            </summary>
        </member>
        <member name="P:Photon.UIElement.LastLocated">
            <summary>
            Gets/Sets the date and time at which the element has last been located
            </summary>
        </member>
        <member name="P:Photon.UIElement.LastMeasured">
            <summary>
            Gets/Sets the date and time at which the element has last been measured
            </summary>
        </member>
        <member name="M:Photon.UIElement.InvalidateLayout">
            <summary>
            This method is fired whenever the element's layout has been invalidated
            </summary>
        </member>
        <member name="M:Photon.UIElement.InvalidateVisual">
            <summary>
            This method is fired whenever the element's visual has been invalidated
            </summary>
        </member>
        <member name="M:Photon.UIElement.Locate">
            <summary>
            This method is fired whenever the element needs to be located
            </summary>
        </member>
        <member name="M:Photon.UIElement.Measure">
            <summary>
            This method is fired whenever the element needs to be measured
            </summary>
        </member>
        <member name="M:Photon.UIElement.Load">
            <summary>
            This method executes when the control is loading, meaning when it is first being rendered on screen
            </summary>
        </member>
        <member name="M:Photon.UIElement.Focus">
            <summary>
            This method sets the focus on the element
            </summary>
        </member>
        <member name="M:Photon.UIElement.Unfocus">
            <summary>
            If the element is focused, this method unfocuses it
            </summary>
        </member>
        <member name="M:Photon.UIElement.Render(Photon.DrawingContext)">
            <summary>
            Renders the element
            </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which to render the element</param>
        </member>
        <member name="M:Photon.UIElement.OnLoaded">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the element has been loaded
            </summary>
        </member>
        <member name="M:Photon.UIElement.OnInvalidateLayout">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the element's layout has been invalidated
            </summary>
        </member>
        <member name="M:Photon.UIElement.OnRender(Photon.DrawingContext)">
             <summary>
             When overriden in a class, this method allows the execution of code whenever the element has been rendered
             </summary>
            <param name="drawingContext">The <see cref="T:Photon.DrawingContext"/> in which the element has been rendered</param>
        </member>
        <member name="M:Photon.UIElement.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            When overriden in a class, this method provides means to run code whenever a <see cref="T:Photon.DependencyProperty"/> has changed
            </summary>
            <param name="propertyName">The case sensitive name of the modified property</param>
            <param name="originalValue">An object representing the property's value before the suffered change(s)</param>
            <param name="value">An object representing the property's actual (new) value</param>
        </member>
        <member name="M:Photon.UIElement.OnKeyDown(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            This method is fired when a key is down over the element
            </summary>
            <param name="e">The <see cref="T:OpenTK.Input.KeyboardKeyEventArgs"/> associated with the KeyDown event</param>
        </member>
        <member name="M:Photon.UIElement.OnKeyUp(OpenTK.Input.KeyboardKeyEventArgs)">
            <summary>
            This method is fired when a key is up over the element
            </summary>
            <param name="e">The <see cref="T:OpenTK.Input.KeyboardKeyEventArgs"/> associated with the KeyUp event</param>
        </member>
        <member name="M:Photon.UIElement.OnKeyPressed(OpenTK.KeyPressEventArgs)">
            <summary>
            This method is fired when a key is pressed over the element
            </summary>
            <param name="e">The <see cref="T:OpenTK.KeyPressEventArgs"/> associated with the KeyPress event</param>
        </member>
        <member name="M:Photon.UIElement.HitTest(Photon.Input.PointHitTestParameters)">
            <summary>
            Determines whether or not the control is hit by the specified <see cref="T:Photon.Input.PointHitTestParameters"/>
            </summary>
            <param name="parameters">The <see cref="T:Photon.Input.PointHitTestParameters"/> configuring the element</param>
            <returns>A <see cref="T:Photon.Input.HitTestResult"/> representing the result of the hit test</returns>
        </member>
        <member name="M:Photon.UIElement.ProcessUIEvent(Photon.Input.UIEventArgs)">
            <summary>
            This method is used to process any ui event handled by the element's logicial parent
            </summary>
            <param name="e">The <see cref="T:Photon.Input.UIEventArgs"/> associated with the event</param>
        </member>
        <member name="T:Photon.ObservableHashSet`1">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.HashSet`1"/> that notifies changes thanks to the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface
            </summary>
            <typeparam name="TElement">The <see cref="T:System.Collections.Generic.HashSet`1"/>'s element type</typeparam>
        </member>
        <member name="E:Photon.ObservableHashSet`1.CollectionChanged">
            <summary>
            This event is fired whenever a change occurs in the <see cref="T:System.Collections.Generic.HashSet`1"/>
            </summary>
        </member>
        <member name="M:Photon.ObservableHashSet`1.Add(`0)">
            <summary>
            Tries to add the specified element into the hashset, and returns a boolean indicating the operation's success
            </summary>
            <param name="element">The element to add</param>
            <returns>A boolean indicating whether or not the specified element could be added to the hashset</returns>
        </member>
        <member name="M:Photon.ObservableHashSet`1.Remove(`0)">
            <summary>
            Tries to remove the specified element from the hashset, and returns a boolean indicating the operation's success
            </summary>
            <param name="element">The element to remove</param>
            <returns>A boolean indicating whether or not the specified element could be removed from the hashset</returns>
        </member>
        <member name="T:Photon.UIElementCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.UIElement"/>s<para></para>    
            </summary>
        </member>
        <member name="T:Photon.DependencyProperty">
            <summary>
            Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.
            </summary>
        </member>
        <member name="M:Photon.DependencyProperty.#ctor(Photon.DependencyPropertyType,System.String,System.Type,System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            A constructor for the <see cref="T:Photon.DependencyProperty"/> type
            </summary>
            <param name="type">The property's <see cref="T:Photon.DependencyPropertyType"/></param>
            <param name="name">The case-sensitive name of the property</param>
            <param name="propertyType">The property's return type</param>
            <param name="declaringType">The type declaring the property</param>
            <param name="getMethod">The method used to retrieve the property's value</param>
            <param name="setMethod">The method used to set the property's value</param>
        </member>
        <member name="M:Photon.DependencyProperty.#ctor(Photon.DependencyPropertyType,System.String,System.Type,System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object)">
            <summary>
            A constructor for the <see cref="T:Photon.DependencyProperty"/> type
            </summary>
            <param name="type">The property's <see cref="T:Photon.DependencyPropertyType"/></param>
            <param name="name">The case-sensitive name of the property</param>
            <param name="propertyType">The property's return type</param>
            <param name="declaringType">The type declaring the property</param>
            <param name="getMethod">The method used to retrieve the property's value</param>
            <param name="setMethod">The method used to set the property's value</param>
            <param name="defaultValue">The property's default (initial) value</param>
        </member>
        <member name="P:Photon.DependencyProperty.Type">
            <summary>
            Gets the <see cref="T:Photon.DependencyProperty"/>'s <see cref="T:Photon.DependencyPropertyType"/>
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.Name">
            <summary>
            Gets a string representing the name of the property
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.PropertyType">
            <summary>
            Gets the property's return type
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.DeclaringType">
            <summary>
            Gets the type declaring the property
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.DefaultValue">
            <summary>
            Gets an object representing the property's default value
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.Path">
            <summary>
            Gets a string representing the property's path
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.GetMethod">
            <summary>
            Gets/Sets the method used to retrieve the property's value
            </summary>
        </member>
        <member name="P:Photon.DependencyProperty.SetMethod">
            <summary>
            Gets/Sets the method used to set the property's value
            </summary>
        </member>
        <member name="M:Photon.DependencyProperty.GetValue(Photon.DependencyObject)">
            <summary>
            Gets the value returned by the property
            </summary>
            <param name="target">The <see cref="T:Photon.DependencyObject"/> for which to retrieve the property's value</param>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyProperty.GetValue``1(Photon.DependencyObject)">
            <summary>
            Gets the value returned by the property
            </summary>
            <param name="target">The <see cref="T:Photon.DependencyObject"/> for which to retrieve the property's value</param>
            <typeparam name="TResult">The expected type of the property's value</typeparam>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.DependencyProperty.SetValue(Photon.DependencyObject,System.Object)">
            <summary>
            Sets the property's value
            </summary>
            <param name="target">The <see cref="T:Photon.DependencyObject"/> for which to set the property's value</param>
            <param name="value">An object representing the value to set</param>
        </member>
        <member name="M:Photon.DependencyProperty.ToString">
            <summary>
            Returns the property's string representation
            </summary>
            <returns>A string representing the property</returns>
        </member>
        <member name="M:Photon.DependencyProperty.Register(System.String,System.Type)">
            <summary>
            Registers a new <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="propertyName">The case-sensitive name of the property to register</param>
            <param name="declaringType">The type declaring the property to register</param>
            <returns>The newly registered <see cref="T:Photon.DependencyProperty"/></returns>
        </member>
        <member name="M:Photon.DependencyProperty.Register(System.String,System.Type,System.Object)">
            <summary>
            Registers a new <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="propertyName">The case-sensitive name of the property to register</param>
            <param name="declaringType">The type declaring the property to register</param>
            <param name="defaultValue">An object representing the property's initial value</param>
            <returns>The newly registered <see cref="T:Photon.DependencyProperty"/></returns>
        </member>
        <member name="M:Photon.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
            <summary>
            Register a new attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="propertyName">The case-sensitive name of the property to register</param>
            <param name="propertyType">The return type of the property to register</param>
            <param name="declaringType">The type declaring the property to register</param>
            <returns>The newly registered attached <see cref="T:Photon.DependencyProperty"/></returns>
        </member>
        <member name="M:Photon.DependencyProperty.ResolveAttachedGetMethodName(System.String)">
            <summary>
            Resolve the name of the specified attached property Get method
            </summary>
            <param name="propertyName">The case-sensitive name of the property for which to resolve the Get method name</param>
            <returns>A string representing the name of the Get method</returns>
        </member>
        <member name="M:Photon.DependencyProperty.ResolveAttachedSetMethodName(System.String)">
            <summary>
            Resolve the name of the specified attached property Set method
            </summary>
            <param name="propertyName">The case-sensitive name of the property for which to resolve the Set method name</param>
            <returns>A string representing the name of the Get method</returns>
        </member>
        <member name="T:Photon.DrawingContext">
            <summary>
            Represents the context into which all <see cref="T:Photon.UIElement"/> are rendered<para></para>
            This class defines high-level methods to render basic elements into OpenGL, thanks to the OpenTK framework
            </summary>
        </member>
        <member name="F:Photon.DrawingContext.TextPrinter">
            <summary>
            The <see cref="T:OpenTK.Graphics.TextPrinter"/> used by <see cref="T:Photon.DrawingContext"/> instances to render text
            </summary>
        </member>
        <member name="M:Photon.DrawingContext.#ctor(Photon.Window)">
            <summary>
            Intializes a new <see cref="T:Photon.DrawingContext"/>
            </summary>
        </member>
        <member name="P:Photon.DrawingContext.Window">
            <summary>
            Gets the <see cref="P:Photon.DrawingContext.Window"/> the <see cref="T:Photon.DrawingContext"/> belongs to
            </summary>
        </member>
        <member name="M:Photon.DrawingContext.BeginRenderPass">
            <summary>
            Begins a new rendering pass
            </summary>
        </member>
        <member name="M:Photon.DrawingContext.DrawRectangle(Photon.Media.Rectangle,Photon.Media.Thickness,Photon.Media.Brush,Photon.Media.Brush)">
            <summary>
            Draws a rectangle with the specified width, height, border thickness and brushes
            </summary>
            <param name="rectangle">The <see cref="T:Photon.Media.Rectangle"/> representing the rectangle's width and height</param>
            <param name="borderThickness">The <see cref="T:Photon.Media.Thickness"/> representing the rectangle's border thickness</param>
            <param name="fillBrush">The <see cref="T:Photon.Media.Brush"/> with which to paint the rectangle's fill</param>
            <param name="borderBrush">The <see cref="T:Photon.Media.Brush"/> with which to paaint the rectangle's border brush</param>
        </member>
        <member name="M:Photon.DrawingContext.DrawText(System.String,Photon.Media.Point,System.Drawing.Font,Photon.Media.Brush)">
            <summary>
            Draws the specified text
            </summary>
            <param name="text">The text to draw</param>
            <param name="position">The position at which to start drawing the text</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> of the text to draw</param>
            <param name="brush">The <see cref="T:Photon.Media.Brush"/> with which to draw the text</param>
        </member>
        <member name="M:Photon.DrawingContext.EndRenderPass">
            <summary>
            Ends a rendering pass
            </summary>
        </member>
        <member name="M:Photon.DrawingContext.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            Measures the size of the specified text
            </summary>
            <param name="text">The text to measure</param>
            <param name="font">The font according to which to measure to text</param>
            <returns>The text's <see cref="T:Photon.Media.Size"/></returns>
        </member>
        <member name="M:Photon.DrawingContext.MeasureTextExtents(System.String,System.Drawing.Font)">
            <summary>
            Measures the extents of the specified text
            </summary>
            <param name="text">The text to measure</param>
            <param name="font">The font according to which to measure to text</param>
            <returns>The text's <see cref="T:OpenTK.Graphics.TextExtents"/></returns>
        </member>
        <member name="T:Photon.ApplicationState">
            <summary>
            Describes the state of an <see cref="T:Photon.Application"/>
            </summary>
        </member>
        <member name="F:Photon.ApplicationState.Running">
            <summary>
            The application is up and running
            </summary>
        </member>
        <member name="F:Photon.ApplicationState.ShuttingDown">
            <summary>
            The application is shutting down
            </summary>
        </member>
        <member name="F:Photon.ApplicationState.NotRunning">
            <summary>
            The application is not running
            </summary>
        </member>
        <member name="T:Photon.DependencyPropertyType">
            <summary>
            Indicates the type a <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="F:Photon.DependencyPropertyType.Property">
            <summary>
            The <see cref="T:Photon.DependencyProperty"/> is a standard property
            </summary>
        </member>
        <member name="F:Photon.DependencyPropertyType.AttachedProperty">
            <summary>
            The <see cref="T:Photon.DependencyProperty"/> is an attached property
            </summary>
        </member>
        <member name="T:Photon.HorizontalAlignment">
            <summary>
            Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element
            </summary>
        </member>
        <member name="F:Photon.HorizontalAlignment.Center">
            <summary>
            An element aligned to the center of the layout slot for the parent element
            </summary>
        </member>
        <member name="F:Photon.HorizontalAlignment.Left">
            <summary>
            An element aligned to the left of the layout slot for the parent element
            </summary>
        </member>
        <member name="F:Photon.HorizontalAlignment.Right">
            <summary>
            An element aligned to the right of the layout slot for the parent element
            </summary>
        </member>
        <member name="F:Photon.HorizontalAlignment.Stretch">
            <summary>
            An element stretched to fill the entire layout slot of the parent element
            </summary>
        </member>
        <member name="T:Photon.ShutdownMode">
            <summary>
            Describes the way an <see cref="T:Photon.Application"/> shuts down
            </summary>
        </member>
        <member name="F:Photon.ShutdownMode.OnMainWindowClosed">
            <summary>
            The <see cref="T:Photon.Application"/> shuts down as soon as its main <see cref="T:Photon.Window"/> closes
            </summary>
        </member>
        <member name="F:Photon.ShutdownMode.OnLastWindowClosed">
            <summary>
            The <see cref="T:Photon.Application"/> shuts down when the last of its registered, active <see cref="T:Photon.Window"/>s closes
            </summary>
        </member>
        <member name="F:Photon.ShutdownMode.OnExplicitShutdown">
            <summary>
            The <see cref="T:Photon.Application"/> only shuts down if explicitly asked to
            </summary>
        </member>
        <member name="T:Photon.VerticalAlignment">
            <summary>
            Describes how a child element is vertically positioned or stretched within a parent's layout slot
            </summary>
        </member>
        <member name="F:Photon.VerticalAlignment.Center">
            <summary>
            The child element is aligned to the center of the parent's layout slot
            </summary>
        </member>
        <member name="F:Photon.VerticalAlignment.Top">
            <summary>
            The child element is aligned to the top of the parent's layout slot
            </summary>
        </member>
        <member name="F:Photon.VerticalAlignment.Bottom">
            <summary>
            The child element is aligned to the bottom of the parent's layout slot
            </summary>
        </member>
        <member name="F:Photon.VerticalAlignment.Stretch">
            <summary>
            The child element stretches to fill the parent's layout slot
            </summary>
        </member>
        <member name="T:Photon.Visibility">
            <summary>
            Specifies the display state of an element
            </summary>
        </member>
        <member name="F:Photon.Visibility.Visible">
            <summary>
            Display the element
            </summary>
        </member>
        <member name="F:Photon.Visibility.Hidden">
            <summary>
            Do not display the element, but reserve space for the element in layout
            </summary>
        </member>
        <member name="F:Photon.Visibility.Collapsed">
            <summary>
            Do not display the element, and do not reserve space for it in layout
            </summary>
        </member>
        <member name="T:Photon.BitmapExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Drawing.Bitmap"/> type
            </summary>
        </member>
        <member name="M:Photon.BitmapExtensions.FromUri(System.Uri)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Bitmap"/> instance based on the specified <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> thanks to which to create the new <see cref="T:System.Drawing.Bitmap"/></param>
            <returns>A new instance of the <see cref="T:System.Drawing.Bitmap"/> class</returns>
        </member>
        <member name="T:Photon.HashSetExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Collections.Generic.HashSet`1"/> type
            </summary>
        </member>
        <member name="M:Photon.HashSetExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements to the hashset
            </summary>
            <typeparam name="TElement">The generic type of the extended <see cref="T:System.Collections.Generic.HashSet`1"/></typeparam>
            <param name="extended">The extended <see cref="T:System.Collections.Generic.HashSet`1"/></param>
            <param name="range">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add to the hashset</param>
        </member>
        <member name="M:Photon.HashSetExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Xml.XmlNodeList)">
            <summary>
            Adds a range of elements to the hashset
            </summary>
            <param name="extended">The extended <see cref="T:System.Collections.Generic.HashSet`1"/></param>
            <param name="range">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add to the hashset</param>
        </member>
        <member name="M:Photon.HashSetExtensions.IndexOf``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Determines the index of the specified element within the hashset
            </summary>
            <typeparam name="TElement">The generic type of the extended <see cref="T:System.Collections.Generic.HashSet`1"/></typeparam>
            <param name="extended">The extended <see cref="T:System.Collections.Generic.HashSet`1"/></param>
            <param name="element">The element whose index is to return</param>
            <returns>An integer representing the index of the specified element</returns>
        </member>
        <member name="T:Photon.PointExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Drawing.Point"/> type
            </summary>
        </member>
        <member name="M:Photon.PointExtensions.ToMediaPoint(System.Drawing.Point)">
            <summary>
            Retrieves the <see cref="T:Photon.Media.Point"/> equivalency of the <see cref="T:System.Drawing.Point"/>
            </summary>
            <param name="extended">The extended <see cref="T:System.Drawing.Point"/></param>
            <returns>The <see cref="T:Photon.Media.Point"/> equivalency of the point</returns>
        </member>
        <member name="T:Photon.PointFExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Drawing.PointF"/> type
            </summary>
        </member>
        <member name="M:Photon.PointFExtensions.ToMediaSize(System.Drawing.SizeF)">
            <summary>
            Retrieves the <see cref="T:Photon.Media.Size"/> equivalency of the <see cref="T:System.Drawing.SizeF"/>
            </summary>
            <param name="extended">The extended <see cref="T:System.Drawing.SizeF"/></param>
            <returns>The <see cref="T:Photon.Media.Size"/> equivalency of the SizeF</returns>
        </member>
        <member name="T:Photon.TextPrinterExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:OpenTK.Graphics.TextPrinter"/> type
            </summary>
        </member>
        <member name="M:Photon.TextPrinterExtensions.WrapText(OpenTK.Graphics.TextPrinter,System.String,System.Drawing.Font,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Wraps the text according to the specified width and height
            </summary>
            <param name="extended">The extended <see cref="T:OpenTK.Graphics.TextPrinter"/></param>
            <param name="textToWrap">A string representing the text to wrap</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> thanks to which the text is rendered</param>
            <param name="width">A double representing the maximal width of the wrapped text</param>
            <param name="height">A double representing the maximal height of the wrapped text</param>
            <returns>The wrapped text</returns>
        </member>
        <member name="M:Photon.TextPrinterExtensions.BreakLine(System.String,System.Drawing.Font,System.Int32,System.Double)">
            <summary>
            Breaks the specified line into a line of a specified maximal width, starting from the specified position
            </summary>
            <param name="line">A string representing the line to break</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> thanks to which the text is rendered</param>
            <param name="position">The position from which to start breaking the line</param>
            <param name="maxWidth">The resulting line's max width</param>
            <returns>The broken line</returns>
        </member>
        <member name="T:Photon.XmlAttributeExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Xml.XmlAttribute"/> type
            </summary>
        </member>
        <member name="M:Photon.XmlAttributeExtensions.IsMarkupAttribute(System.Xml.XmlAttribute)">
            <summary>
            Determines whether or not the attribute is a markup attribute
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlAttribute"/></param>
            <returns>A boolean indicating whether or not the attribute is a markup attribute</returns>
        </member>
        <member name="T:Photon.XmlDocumentExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Xml.XmlDocument"/> type
            </summary>
        </member>
        <member name="M:Photon.XmlDocumentExtensions.GetAllSiblings(System.Xml.XmlDocument)">
            <summary>
            Retrieves all of the document's siblings
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlDocument"/></param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the document's sibling <see cref="T:System.Xml.XmlNode"/>s</returns>
        </member>
        <member name="T:Photon.XmlNodeExtensions">
            <summary>
            This static class defines extensions methods for the <see cref="T:System.Xml.XmlNode"/> type
            </summary>
        </member>
        <member name="M:Photon.XmlNodeExtensions.GetAllSiblings(System.Xml.XmlNode)">
            <summary>
            Retrieves all the siblings of the specified <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlNode"/></param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all of the <see cref="T:System.Xml.XmlNode"/> siblings</returns>
        </member>
        <member name="T:Photon.IDependencyElement">
            <summary>
            This interface defines methods and properties for all <see cref="T:Photon.DependencyObject"/> in Photon
            </summary>
        </member>
        <member name="P:Photon.IDependencyElement.DependencyProperties">
            <summary>
            Gets a dictionary containing all of the element's <see cref="T:Photon.DependencyProperty"/> 
            </summary>
        </member>
        <member name="P:Photon.IDependencyElement.AnimationClocks">
            <summary>
            Gets a list containing all the <see cref="T:Photon.Media.Animations.AnimationClock"/> attached to the <see cref="T:Photon.IDependencyElement"/>
            </summary>
        </member>
        <member name="M:Photon.IDependencyElement.GetValue(System.String)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.IDependencyElement.GetValue``1(System.String)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <typeparam name="TResult">The expected type of the returned value</typeparam>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.IDependencyElement.GetValue(Photon.DependencyProperty)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.IDependencyElement.GetValue``1(Photon.DependencyProperty)">
            <summary>
            Gets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <typeparam name="TResult">The expected type of the returned value</typeparam>
            <returns>An object representing the property's value</returns>
        </member>
        <member name="M:Photon.IDependencyElement.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified property
            </summary>
            <param name="propertyName">The case sensitive name of the property to get</param>
            <param name="value">The value to set the property with</param>
        </member>
        <member name="M:Photon.IDependencyElement.SetValue(Photon.DependencyProperty,System.Object)">
            <summary>
            Sets the value of the specified property
            </summary>
            <param name="dependencyProperty">The <see cref="T:Photon.DependencyProperty"/> to get</param>
            <param name="value">The value to set the property with</param>
        </member>
        <member name="T:Photon.IUIElement">
            <summary>
            UIElement is a base interface for core level implementations building on Photon elements and basic presentation characteristics.
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseMove">
            <summary>
            This event is fired every time the mouse moves over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseButtonDown">
            <summary>
            This event is fired every time a mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseButtonUp">
            <summary>
            This event is fired every time a mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseLeftButtonDown">
            <summary>
            This event is fired every time the left mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseLeftButtonUp">
            <summary>
            This event is fired every time the left mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseMiddleButtonDown">
            <summary>
            This event is fired every time the middle mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseMiddleButtonUp">
            <summary>
            This event is fired every time the middle mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseRightButtonDown">
            <summary>
            This event is fired every time the right mouse button is down over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseRightButtonUp">
            <summary>
            This event is fired every time the right mouse button is up over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.MouseWheel">
            <summary>
            This event is fired every time the mouse wheel is used over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.KeyDown">
            <summary>
            This event is fired every time a key is down over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.KeyUp">
            <summary>
            This event is fired every time a key is up over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.KeyPressed">
            <summary>
            This event is fired every time a key is pressed over the element
            </summary>
        </member>
        <member name="E:Photon.IUIElement.VisibilityChanged">
            <summary>
            This event is fired every time the element's visibility has changed
            </summary>
        </member>
        <member name="E:Photon.IUIElement.GotFocus">
            <summary>
            This event is fired every time the element gets focus
            </summary>
        </member>
        <member name="E:Photon.IUIElement.LostFocus">
            <summary>
            This event is fired every time the element looses focus
            </summary>
        </member>
        <member name="P:Photon.IUIElement.Style">
            <summary>
            Gets/sets the <see cref="T:Photon.IUIElement"/>'s <see cref="T:Photon.Style"/>
            </summary>
        </member>
        <member name="P:Photon.IUIElement.Resources">
            <summary>
            Gets/sets the <see cref="T:Photon.IUIElement"/>'s <see cref="T:Photon.ResourceDictionary"/>
            </summary>
        </member>
        <member name="P:Photon.IUIElement.Width">
            <summary>
            Gets/Sets the element's width
            </summary>
        </member>
        <member name="P:Photon.IUIElement.Height">
            <summary>
            Gets/Sets the element's height
            </summary>
        </member>
        <member name="P:Photon.IUIElement.IsHitTestVisible">
            <summary>
            Gets/Sets a value indicating whether or not the element is hit test visible
            </summary>
        </member>
        <member name="P:Photon.IUIElement.LayoutTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the element's layout target
            </summary>
        </member>
        <member name="P:Photon.IUIElement.RenderTarget">
            <summary>
            Gets a <see cref="T:Photon.Media.Rectangle"/> representing the element's render target
            </summary>
        </member>
        <member name="M:Photon.IUIElement.InvalidateVisual">
            <summary>
            This method is fired whenever the element's visual has been invalidated
            </summary>
        </member>
        <member name="M:Photon.IUIElement.InvalidateLayout">
            <summary>
            This method is fired whenever the element's layout has been invalidated
            </summary>
        </member>
        <member name="M:Photon.IUIElement.ProcessUIEvent(Photon.Input.UIEventArgs)">
            <summary>
            This method is used to process any ui event handled by the element's logicial parent
            </summary>
            <param name="e">The <see cref="T:Photon.Input.UIEventArgs"/> associated with the event</param>
        </member>
        <member name="T:Photon.SystemParameters">
            <summary>
            This static class defines methods to access system variables
            </summary>
        </member>
        <member name="P:Photon.SystemParameters.WorkArea">
            <summary>
            Gets the work area's <see cref="T:Photon.Media.Size"/>
            </summary>
        </member>
        <member name="T:Photon.Input.FocusManager">
            <summary>
            This class defines static members for handling the focus of <see cref="T:Photon.IUIElement"/>s
            </summary>
        </member>
        <member name="F:Photon.Input.FocusManager.FocusedElementProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.FocusManager"/>'s FocusedElement attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.FocusManager.GetFocusedElement(Photon.IUIElement)">
            <summary>
            Gets the focused <see cref="T:Photon.UIElement"/>, if any, within the specified focus scope
            </summary>
            <param name="focusScope">The <see cref="T:Photon.IUIElement"/> that represents the scope within which to find the focused element</param>
            <returns>A <see cref="T:Photon.UIElement"/> representing the focused element of the specified focus scope</returns>
        </member>
        <member name="M:Photon.Input.FocusManager.SetFocusedElement(Photon.IUIElement,Photon.UIElement)">
            <summary>
            Sets the focused <see cref="T:Photon.UIElement"/> within the specified focus scope
            </summary>
            <param name="focusScope">The <see cref="T:Photon.IUIElement"/> that represents the scope for which to set the focused element</param>
            <param name="focusedElement">The <see cref="T:Photon.UIElement"/> to set the focus to</param>
        </member>
        <member name="F:Photon.Input.FocusManager.IsFocusScopeProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.FocusManager"/>'s IsFocusScope attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.FocusManager.GetIsFocusScope(Photon.IUIElement)">
            <summary>
            Gets a boolean indicating whether or not the specified <see cref="T:Photon.IUIElement"/> is a focus scope element
            </summary>
            <param name="element">The <see cref="T:Photon.IUIElement"/> to check</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:Photon.IUIElement"/> is a focus scope element</returns>
        </member>
        <member name="M:Photon.Input.FocusManager.SetIsFocusScope(Photon.IUIElement,System.Boolean)">
            <summary>
            Sets a boolean indicating whether or not the specified <see cref="T:Photon.IUIElement"/> is a focus scope element
            </summary>
            <param name="element">The <see cref="T:Photon.IUIElement"/> to set</param>
            <param name="isFocusScope">A boolean indicating whether or not the specified <see cref="T:Photon.IUIElement"/> is a focus scope element</param>
        </member>
        <member name="F:Photon.Input.FocusManager.FocusableElementsProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.FocusManager"/>'s FocusableElements attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.FocusManager.GetFocusableElements(Photon.IUIElement)">
            <summary>
            Gets a list of all the focusable <see cref="T:Photon.UIElement"/> contained within the specified focus scope
            </summary>
            <param name="focusScope">The focus scope <see cref="T:Photon.IUIElement"/></param>
            <returns>A list of all the focusable <see cref="T:Photon.UIElement"/> contained within the specified focus scope</returns>
        </member>
        <member name="M:Photon.Input.FocusManager.SetFocusableElements(Photon.IUIElement,System.Collections.Generic.HashSet{Photon.UIElement})">
            <summary>
            Sets a list of all the focusable <see cref="T:Photon.UIElement"/> contained within the specified focus scope
            </summary>
            <param name="focusScope">The focus scope <see cref="T:Photon.IUIElement"/></param>
            <param name="focusables">A list of all the focusable <see cref="T:Photon.UIElement"/> to add to the specified focus scope</param>
        </member>
        <member name="F:Photon.Input.FocusManager.IsFocusableProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.FocusManager"/>'s IsFocusable attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.FocusManager.GetIsFocusable(Photon.UIElement)">
            <summary>
            Gets a boolean indicating whether or not the specified <see cref="T:Photon.UIElement"/> is focusable
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to check</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:Photon.UIElement"/> is focusable</returns>
        </member>
        <member name="M:Photon.Input.FocusManager.SetIsFocusable(Photon.UIElement,System.Boolean)">
            <summary>
            Sets a boolean indicating whether or not the specified <see cref="T:Photon.UIElement"/> is focusable
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to set</param>
            <param name="isFocusable">A boolean indicating whether or not the specified <see cref="T:Photon.UIElement"/> is focusable</param>
        </member>
        <member name="M:Photon.Input.FocusManager.AppendFocusProperties(Photon.IUIElement)">
            <summary>
            This method is used to append all the <see cref="T:Photon.DependencyProperty"/> required by the <see cref="T:Photon.Input.FocusManager"/>
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to which to append the <see cref="T:Photon.DependencyProperty"/> to</param>
        </member>
        <member name="M:Photon.Input.FocusManager.GetFocusScopeElement(Photon.UIElement)">
            <summary>
            Retrieves the focus scope element within which is contained the specified <see cref="T:Photon.UIElement"/>
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> for which to retrieve the focus scope</param>
            <returns>A <see cref="T:Photon.IUIElement"/> representing the specified <see cref="T:Photon.UIElement"/>'s focus scope</returns>
        </member>
        <member name="T:Photon.Input.HitTestResult">
            <summary>
            Provides the base class for several derived classes that represents the return value from a hit test
            </summary>
        </member>
        <member name="M:Photon.Input.HitTestResult.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Input.HitTestResult"/> instance
            </summary>
        </member>
        <member name="M:Photon.Input.HitTestResult.#ctor(Photon.IUIElement)">
            <summary>
            Initializes a new <see cref="T:Photon.Input.HitTestResult"/> with the specified <see cref="T:Photon.IUIElement"/>
            </summary>
            <param name="elementHit">The <see cref="T:Photon.IUIElement"/> that has been hit during the test/></param>
        </member>
        <member name="P:Photon.Input.HitTestResult.ElementHit">
            <summary>
            Gets the <see cref="T:Photon.IUIElement"/> that has been hit during the test/>
            </summary>
        </member>
        <member name="P:Photon.Input.HitTestResult.HasHit">
            <summary>
            Gets a boolean indicating whether or not an <see cref="T:Photon.IUIElement"/> has been hit during the test
            </summary>
        </member>
        <member name="T:Photon.Input.KeyboardNavigation">
            <summary>
            This class defines static members for handling keyboard navigation
            </summary>
        </member>
        <member name="F:Photon.Input.KeyboardNavigation.IsTabStopProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.KeyboardNavigation"/> IsTabStop attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.GetIsTabStop(Photon.UIElement)">
            <summary>
            Gets a boolean indicating whether or not the specified element is a Tab stop
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to check</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.SetIsTabStop(Photon.UIElement,System.Boolean)">
            <summary>
            Sets a boolean indicating whether or not the specified element is a Tab stop
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to set</param>
            <param name="isTabStop">A boolean indicating whether or not the element is a Tab stop element</param>
        </member>
        <member name="F:Photon.Input.KeyboardNavigation.TabIndexProperty">
            <summary>
            Describes the <see cref="T:Photon.Input.KeyboardNavigation"/> TabIndex attached <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.GetTabIndex(Photon.UIElement)">
            <summary>
            Gets an integer representing the specified <see cref="T:Photon.UIElement"/>'s Tab index
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> who's Tab index is to return</param>
            <returns>An integer</returns>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.SetTabIndex(Photon.UIElement,System.Int32)">
            <summary>
            Sets an integer representing the specified <see cref="T:Photon.UIElement"/>'s Tab index
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> who's Tab index is to set</param>
            <param name="index">An integer representing the <see cref="T:Photon.UIElement"/>'s Tab index</param>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.AppendKeyboardNavigationProperties(Photon.UIElement)">
            <summary>
            This method is used to append all the <see cref="T:Photon.DependencyProperty"/> required for <see cref="T:Photon.Input.KeyboardNavigation"/>
            </summary>
            <param name="element">The <see cref="T:Photon.UIElement"/> to which to append the <see cref="T:Photon.DependencyProperty"/> to</param>
        </member>
        <member name="M:Photon.Input.KeyboardNavigation.NavigateToNextElement(Photon.IUIElement)">
            <summary>
            Sets the focus to the next focusable <see cref="T:Photon.UIElement"/> available
            </summary>
            <param name="focusScope">The <see cref="T:Photon.IUIElement"/> within which to navigate</param>
        </member>
        <member name="T:Photon.Input.PointHitTestParameters">
            <summary>
            Specifies a <see cref="T:Photon.Media.Point"/> as the parameter to be used for hit testing of a visual object
            </summary>
        </member>
        <member name="M:Photon.Input.PointHitTestParameters.#ctor(Photon.Media.Point)">
            <summary>
            Initializes a new <see cref="T:Photon.Input.PointHitTestParameters"/> with the specified <see cref="T:Photon.Media.Point"/>
            </summary>
            <param name="hitPoint">The <see cref="T:Photon.Media.Point"/> to be used for hit testing of a visual object</param>
        </member>
        <member name="P:Photon.Input.PointHitTestParameters.HitPoint">
            <summary>
            Gets the <see cref="T:Photon.Media.Point"/> to be used for hit testing of a visual object
            </summary>
        </member>
        <member name="T:Photon.Input.UIEventArgs">
            <summary>
            Represents the <see cref="T:System.EventArgs"/> associated with the <see cref="M:Photon.UIElement.ProcessUIEvent(Photon.Input.UIEventArgs)"/> method
            </summary>
        </member>
        <member name="M:Photon.Input.UIEventArgs.#ctor(Photon.Input.UIEvent,System.EventArgs)">
            <summary>
            Initializes the <see cref="T:Photon.Input.UIEventArgs"/> with the specified <see cref="T:Photon.Input.UIEvent"/> and source <see cref="T:System.EventArgs"/>
            </summary>
            <param name="sourceEvent">The <see cref="T:Photon.Input.UIEvent"/> for which to create the <see cref="T:Photon.Input.UIEventArgs"/></param>
            <param name="sourceEventArgs">The <see cref="T:System.EventArgs"/> associated with the triggering event</param>
        </member>
        <member name="P:Photon.Input.UIEventArgs.SourceEvent">
            <summary>
            Gets the <see cref="T:Photon.Input.UIEvent"/> for which to create the <see cref="T:Photon.Input.UIEventArgs"/>
            </summary>
        </member>
        <member name="P:Photon.Input.UIEventArgs.SourceEventArgs">
            <summary>
            Gets the <see cref="T:System.EventArgs"/> associated with the triggering event
            </summary>
        </member>
        <member name="P:Photon.Input.UIEventArgs.IsHandled">
            <summary>
            Gets/Sets a boolean indicating whether or not the <see cref="T:Photon.Input.UIEventArgs"/> has been handled
            </summary>
        </member>
        <member name="T:Photon.Input.TextSelectionMode">
            <summary>
            Describes the way a portion of text is selected
            </summary>
        </member>
        <member name="F:Photon.Input.TextSelectionMode.LeftHanded">
            <summary>
            The text is selected from left to right (forward)
            </summary>
        </member>
        <member name="F:Photon.Input.TextSelectionMode.RightHanded">
            <summary>
            The text is selected from right to left (backward)
            </summary>
        </member>
        <member name="T:Photon.Input.UIEvent">
            <summary>
            Enumerates all supported ui events
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseMove">
            <summary>
            The MouseMove event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseButtonDown">
            <summary>
            The MouseButtonDown event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseLeftButtonDown">
            <summary>
            The MouseLeftButtonDown event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseMiddleButtonDown">
            <summary>
            The MouseMiddleButtonDown event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseRightButtonDown">
            <summary>
            The MouseRightButtonDown event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseButtonUp">
            <summary>
            The MouseButtonUp event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseLeftButtonUp">
            <summary>
            The MouseLeftButtonUp event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseMiddleButtonUp">
            <summary>
            The MouseMiddleButtonUp event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseRightButtonUp">
            <summary>
            The MouseRightButtonUp event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.MouseWheel">
            <summary>
            The MouseWheel event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.KeyDown">
            <summary>
            The KeyDown event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.KeyUp">
            <summary>
            The KeyUp event
            </summary>
        </member>
        <member name="F:Photon.Input.UIEvent.KeyPressed">
            <summary>
            The KeyPressed event
            </summary>
        </member>
        <member name="T:Photon.Markup.MarkupExtension">
            <summary>
            Provides a base class for XAML markup extension implementations that can be supported by Photon XAML Services and other XAML readers and XAML writers
            </summary>
        </member>
        <member name="M:Photon.Markup.MarkupExtension.ProvideValue(Photon.Markup.IContext)">
            <summary>
            Returns the value provided by the <see cref="T:Photon.Markup.MarkupExtension"/> in the specified <see cref="T:Photon.Markup.IContext"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.IContext"/> for which to provide the value</param>
            <returns>An object representing the value provided by the <see cref="T:Photon.Markup.MarkupExtension"/> in the specified <see cref="T:Photon.Markup.IContext"/></returns>
        </member>
        <member name="T:Photon.Markup.NamespaceDeclarationCollection">
            <summary>
            Represents a collection of markup <see cref="T:Photon.Markup.NamespaceDeclaration"/>
            </summary>
        </member>
        <member name="T:Photon.Markup.NamespaceDeclaration">
            <summary>
            Represents a namespace declared in a markup document
            </summary>
        </member>
        <member name="F:Photon.Markup.NamespaceDeclaration.ASSEMBLY_NAMESPACE_PREFIX">
            <summary>
            The text preceeding the reference of an <see cref="T:System.Reflection.Assembly"/>'s namespace
            </summary>
        </member>
        <member name="M:Photon.Markup.NamespaceDeclaration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Photon.Markup.NamespaceDeclaration"/> based on the specified namespace prefix and <see cref="P:Photon.Markup.NamespaceDeclaration.Uri"/>
            </summary>
            <param name="prefix">The prefix of the namespace</param>
            <param name="uri">A string representing the namespace's uri</param>
        </member>
        <member name="P:Photon.Markup.NamespaceDeclaration.Type">
            <summary>
            Gets the <see cref="T:Photon.Markup.NamespaceDeclaration"/>'s <see cref="T:Photon.Markup.NamespaceDeclarationType"/>
            </summary>
        </member>
        <member name="P:Photon.Markup.NamespaceDeclaration.Prefix">
            <summary>
            Gets the markup prefix of the namespace
            </summary>
        </member>
        <member name="P:Photon.Markup.NamespaceDeclaration.Uri">
            <summary>
            Gets a string representing the <see cref="T:Photon.Markup.NamespaceDeclaration"/>'s uri 
            </summary>
        </member>
        <member name="M:Photon.Markup.NamespaceDeclaration.GetReferenceNamespace">
            <summary>
            Returns the namespace referenced by the <see cref="T:Photon.Markup.NamespaceDeclaration"/><para></para> 
            Works only if the <see cref="P:Photon.Markup.NamespaceDeclaration.Type"/> property has been set to <see cref="F:Photon.Markup.NamespaceDeclarationType.AssemblyNamespaceReference"/> 
            </summary>
            <returns>A string representing the namespace referenced by the <see cref="T:Photon.Markup.NamespaceDeclaration"/></returns>
        </member>
        <member name="M:Photon.Markup.NamespaceDeclaration.GetReferencedAssembly">
            <summary>
            Returns the <see cref="T:System.Reflection.Assembly"/> referenced by the <see cref="T:Photon.Markup.NamespaceDeclaration"/><para></para> 
            Works only if the <see cref="P:Photon.Markup.NamespaceDeclaration.Type"/> property has been set to <see cref="F:Photon.Markup.NamespaceDeclarationType.AssemblyNamespaceReference"/> 
            </summary>
            <returns>The <see cref="T:System.Reflection.Assembly"/> referenced by the <see cref="T:Photon.Markup.NamespaceDeclaration"/></returns>
        </member>
        <member name="T:Photon.Markup.TypeMarkupExtension">
            <summary>
            Implements a <see cref="T:Photon.Markup.MarkupExtension"/> that supports type references
            </summary>
        </member>
        <member name="M:Photon.Markup.TypeMarkupExtension.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Photon.Markup.TypeMarkupExtension"/>
            </summary>
            <param name="namespacePrefix">The referenced type's namespace prefix</param>
            <param name="typeName">The referenced type name</param>
        </member>
        <member name="P:Photon.Markup.TypeMarkupExtension.NamespacePrefix">
            <summary>
            Gets the prefix of the namespace of the type referenced by the <see cref="T:Photon.Markup.TypeMarkupExtension"/>
            </summary>
        </member>
        <member name="P:Photon.Markup.TypeMarkupExtension.TypeName">
            <summary>
            Gets the name of the type referenced by the <see cref="T:Photon.Markup.TypeMarkupExtension"/>
            </summary>
        </member>
        <member name="M:Photon.Markup.TypeMarkupExtension.ProvideValue(Photon.Markup.IContext)">
            <summary>
            Returns the value provided by the <see cref="T:Photon.Markup.TypeMarkupExtension"/> in the specified <see cref="T:Photon.Markup.IContext"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.IContext"/> for which to provide the value</param>
            <returns>The type provided by the <see cref="T:Photon.Markup.TypeMarkupExtension"/> in the specified <see cref="T:Photon.Markup.IContext"/></returns>
        </member>
        <member name="M:Photon.Markup.TypeMarkupExtension.TryParse(System.String,Photon.Markup.TypeMarkupExtension@)">
            <summary>
            Try to parse the specified string, and return a boolean indicating whether or not the attempt was successfull
            </summary>
            <param name="value">The string to parse</param>
            <param name="typeExtension">The <see cref="T:Photon.Markup.TypeMarkupExtension"/> returned in case the specified string could be parsed</param>
            <returns>A boolean indicating whether or not the conversion attempt was successfull</returns>
        </member>
        <member name="T:Photon.Markup.XamlParser">
            <summary>
            Provides means to parse xaml markup into Photon <see cref="T:Photon.DependencyObject"/>s
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.PREFIX_XML_NAMESPACE">
            <summary>
            The prefix corresponding to the xml namespace
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.PREFIX_MARKUP">
            <summary>
            The prefix corresponding to the markup namespace
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.ATTRIBUTE_CLASS_NAME">
            <summary>
            The name of the class attribute
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.ATTRIBUTE_KEY_NAME">
            <summary>
            The name of the key attribute
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.ATTRIBUTE_CLASS_FULLNAME">
            <summary>
            The full name of the class attribute (including prefix)
            </summary>
        </member>
        <member name="F:Photon.Markup.XamlParser.ATTRIBUTE_KEY_FULLNAME">
            <summary>
            The full name of the key attribute (including prefix)
            </summary>
        </member>
        <member name="M:Photon.Markup.XamlParser.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.Markup.XamlParser"/> class
            </summary>
            <param name="xmlDocument"></param>
        </member>
        <member name="P:Photon.Markup.XamlParser.Document">
            <summary>
            Gets the <see cref="T:Photon.Markup.XamlParser"/>'s underlying <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="P:Photon.Markup.XamlParser.DefaultNamespaceDeclaration">
            <summary>
            Gets the default <see cref="T:Photon.Markup.NamespaceDeclaration"/> in the <see cref="T:Photon.Markup.IHandler"/>'s scope
            </summary>
        </member>
        <member name="P:Photon.Markup.XamlParser.NamespaceDeclarations">
            <summary>
            Gets a collection of all the <see cref="T:Photon.Markup.NamespaceDeclaration"/> in the <see cref="T:Photon.Markup.IHandler"/>'s scope
            </summary>
        </member>
        <member name="P:Photon.Markup.XamlParser.ElementTree">
            <summary>
            Gets the xaml document's <see cref="T:Photon.DependencyElementTree"/>
            </summary>
        </member>
        <member name="P:Photon.Markup.XamlParser.ElementKeys">
            <summary>
            Gets a dictionary containing the both the hashcode and key of registered element
            </summary>
        </member>
        <member name="M:Photon.Markup.XamlParser.Initialize">
            <summary>
            Initializes the <see cref="T:Photon.Markup.XamlParser"/>
            </summary>
        </member>
        <member name="M:Photon.Markup.XamlParser.Parse">
            <summary>
            Parses the xaml document
            </summary>
            <returns>The root <see cref="T:Photon.IDependencyElement"/> of the parsed xaml document</returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.ParseNode(Photon.Markup.XamlParserContext,System.Xml.XmlNode,Photon.Markup.IAddChild)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.XamlParserContext"/> for which to parse the <see cref="T:System.Xml.XmlNode"/></param>
            <param name="xmlNode">The <see cref="T:System.Xml.XmlNode"/> to parse</param>
            <param name="parentNode">The parsed parent element of the <see cref="T:System.Xml.XmlNode"/> to parse</param>
            <returns>The parsed <see cref="T:Photon.IDependencyElement"/></returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.ParsePropertyNode(Photon.Markup.XamlParserContext,System.Object,System.Xml.XmlNode)">
            <summary>
            Parses the specified property <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.XamlParserContext"/> for which to parse the property <see cref="T:System.Xml.XmlNode"/></param>
            <param name="parsedElement">The <see cref="T:Photon.IDependencyElement"/> to which the property to parse belongs to</param>
            <param name="xmlNode">The <see cref="T:System.Xml.XmlNode"/> to parse</param>
        </member>
        <member name="M:Photon.Markup.XamlParser.ParseNodeAttribute(Photon.Markup.XamlParserContext,System.Xml.XmlAttribute,System.Object)">
            <summary>
            Parses the specified <see cref="T:System.Xml.XmlAttribute"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.XamlParserContext"/> for which to parse the <see cref="T:System.Xml.XmlAttribute"/></param>
            <param name="attribute">The <see cref="T:System.Xml.XmlAttribute"/> to parse</param>
            <param name="parsedElement">The parsed object for which to parse the specified <see cref="T:System.Xml.XmlAttribute"/></param>
        </member>
        <member name="M:Photon.Markup.XamlParser.ParseValue(Photon.Markup.XamlParserContext,System.Type,System.String)">
            <summary>
            Parses the specified string into the expected type
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.XamlParserContext"/> for which to parse the value</param>
            <param name="expectedType">The expected <see cref="T:System.Type"/> of the returned value</param>
            <param name="valueString">The value to parse</param>
            <returns>An <see cref="T:System.Object"/> representing the parsed value</returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.ParseDependencyProperty(Photon.Markup.XamlParserContext,System.Object,System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Photon.DependencyProperty"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.XamlParserContext"/> for which to parse the value</param>
            <param name="parsedElement">The parsed element to parse the <see cref="T:Photon.DependencyProperty"/> for</param>
            <param name="valueString">The value to parse</param>
            <returns>The parsed <see cref="T:Photon.DependencyProperty"/></returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.ElementTypeOf(System.String,System.String)">
            <summary>
            Determines the type equivalency based on both the specified namespace prefix and type name
            </summary>
            <param name="namespacePrefix">The prefix of the referenced type's namespace</param>
            <param name="typeName">The name of the referenced type</param>
            <returns>The <see cref="T:System.Type"/> equivalency based on both the specified namespace prefix and type name</returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.ElementTypeOf(System.Xml.XmlNode)">
            <summary>
            Determines the <see cref="T:Photon.DependencyObject"/>'s type of the specified <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="xmlNode">The <see cref="T:System.Xml.XmlNode"/> to retrieve the <see cref="T:Photon.DependencyObject"/>'s equivalency for</param>
            <returns>The <see cref="T:System.Type"/> equivalency of the specified <see cref="T:System.Xml.XmlNode"/></returns>
        </member>
        <member name="M:Photon.Markup.XamlParser.LoadDependencyElementFrom``1(System.IO.Stream)">
            <summary>
            Loads the specified xaml <see cref="T:System.IO.Stream"/> and parses it into the expect type
            </summary>
            <typeparam name="TElement">The expected type of the parsed <see cref="T:Photon.IUIElement"/></typeparam>
            <param name="xamlStream">The <see cref="T:System.IO.Stream"/> containing the element's Xaml</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Markup.StaticResource">
            <summary>
            Implements a <see cref="T:Photon.Markup.MarkupExtension"/> that supports static (XAML load time) resource references made from XAML
            </summary>
        </member>
        <member name="M:Photon.Markup.StaticResource.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Photon.Markup.StaticResource"/> instance based on the specified resource key
            </summary>
            <param name="resourceKey">The key of the resource referenced by the <see cref="T:Photon.Markup.StaticResource"/></param>
        </member>
        <member name="P:Photon.Markup.StaticResource.ResourceKey">
            <summary>
            Gets the key of the resource referenced by the <see cref="T:Photon.Markup.StaticResource"/>
            </summary>
        </member>
        <member name="M:Photon.Markup.StaticResource.ProvideValue(Photon.Markup.IContext)">
            <summary>
            Returns the value provided by the <see cref="T:Photon.Markup.StaticResource"/> in the specified <see cref="T:Photon.Markup.IContext"/>
            </summary>
            <param name="context">The <see cref="T:Photon.Markup.IContext"/> for which to provide the value</param>
            <returns>An object representing the value provided by the <see cref="T:Photon.Markup.StaticResource"/> in the specified <see cref="T:Photon.Markup.IContext"/></returns>
        </member>
        <member name="M:Photon.Markup.StaticResource.TryParse(System.String,Photon.Markup.StaticResource@)">
            <summary>
            Try to parse the specified string, and return a boolean indicating whether or not the attempt was successfull
            </summary>
            <param name="value">The string to parse</param>
            <param name="staticResource">The <see cref="T:Photon.Markup.StaticResource"/> returned in case the specified string could be parsed</param>
            <returns>A boolean indicating whether or not the conversion attempt was successfull</returns>
        </member>
        <member name="T:Photon.Markup.XamlParserContext">
            <summary>
            Represents the <see cref="T:Photon.Markup.XamlParser"/>'s <see cref="T:Photon.Markup.IContext"/>
            </summary>
        </member>
        <member name="M:Photon.Markup.XamlParserContext.#ctor(Photon.Markup.XamlParser)">
            <summary>
            Initializes a new <see cref="T:Photon.Markup.XamlParserContext"/>
            </summary>
            <param name="handler">The <see cref="T:Photon.Markup.XamlParser"/> associated with the <see cref="T:Photon.Markup.XamlParserContext"/></param>
        </member>
        <member name="P:Photon.Markup.XamlParserContext.Handler">
            <summary>
            Gets the <see cref="T:Photon.Markup.IHandler"/> (in this case a <see cref="T:Photon.Markup.XamlParser"/> instance) associated with the <see cref="T:Photon.Markup.IContext"/>
            </summary>
        </member>
        <member name="T:Photon.Markup.NamespaceDeclarationType">
            <summary>
            Describes the type of a <see cref="T:Photon.Markup.NamespaceDeclaration"/>
            </summary>
        </member>
        <member name="F:Photon.Markup.NamespaceDeclarationType.Standard">
            <summary>
            The <see cref="T:Photon.Markup.NamespaceDeclaration"/> is a normal xml namespace declaration
            </summary>
        </member>
        <member name="F:Photon.Markup.NamespaceDeclarationType.AssemblyNamespaceReference">
            <summary>
            The <see cref="T:Photon.Markup.NamespaceDeclaration"/> references a namespace contained within an <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="T:Photon.Markup.XmlAttributeCollectionExtensions">
            <summary>
            Defines extensions methods for the <see cref="T:System.Xml.XmlAttributeCollection"/> type
            </summary>
        </member>
        <member name="M:Photon.Markup.XmlAttributeCollectionExtensions.FirstOrDefault(System.Xml.XmlAttributeCollection,System.Func{System.Xml.XmlAttribute,System.Boolean})">
            <summary>
            Returns the first <see cref="T:System.Xml.XmlAttribute"/> matching the specified predicate or returns null
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlAttributeCollection"/></param>
            <param name="predicate">The predicate to match</param>
            <returns>The first <see cref="T:System.Xml.XmlAttribute"/> matching the specified predicate</returns>
        </member>
        <member name="T:Photon.Markup.XmlNodeExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.Xml.XmlNode"/> type
            </summary>
        </member>
        <member name="M:Photon.Markup.XmlNodeExtensions.IsPropertyNodeOf(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Determines whether or not the <see cref="T:System.Xml.XmlNode"/> is a property node of the specified parent
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlNode"/></param>
            <param name="parentNode">The parent <see cref="T:System.Xml.XmlNode"/></param>
            <returns>A boolean indicating whether or not the <see cref="T:System.Xml.XmlNode"/> is a property node of the specified parent</returns>
        </member>
        <member name="T:Photon.Markup.XmlNodeListExtensions">
            <summary>
            Defines extensions methods for the <see cref="T:System.Xml.XmlNodeList"/> type
            </summary>
        </member>
        <member name="M:Photon.Markup.XmlNodeListExtensions.Where(System.Xml.XmlNodeList,System.Func{System.Xml.XmlNode,System.Boolean})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.XmlNode"/> matching the specified predicate
            </summary>
            <param name="extended">The extended <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.XmlNode"/></param>
            <param name="predicate">The predicate to match</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Markup.XmlNodeListExtensions.FirstOrDefault(System.Xml.XmlNodeList,System.Func{System.Xml.XmlNode,System.Boolean})">
            <summary>
            Returns the first <see cref="T:System.Xml.XmlNode"/> that matches the specified predicate or returns null
            </summary>
            <param name="extended">The extended <see cref="T:System.Xml.XmlNode"/></param>
            <param name="predicate">The predicate to match</param>
            <returns>The first <see cref="T:System.Xml.XmlNode"/> that matches the specified predicate or returns null</returns>
        </member>
        <member name="T:Photon.Markup.IAddChild">
            <summary>
            Provides a means to parse elements that permit mixtures of child elements or text
            </summary>
        </member>
        <member name="M:Photon.Markup.IAddChild.AddChild(System.Object)">
            <summary>
            Adds a child object
            </summary>
            <param name="child">An object representing the child to add</param>
        </member>
        <member name="M:Photon.Markup.IAddChild.AddText(System.String)">
            <summary>
            Adds the text content of a node to the object
            </summary>
            <param name="text">A string representing the text to add</param>
        </member>
        <member name="T:Photon.Markup.IContext">
            <summary>
            Defines the context in which markup code is handled
            </summary>
        </member>
        <member name="P:Photon.Markup.IContext.Handler">
            <summary>
            When implemented in a class, gets the <see cref="T:Photon.Markup.IHandler"/> associated with the <see cref="T:Photon.Markup.IContext"/>
            </summary>
        </member>
        <member name="T:Photon.Markup.IHandler">
            <summary>
            Defines an object that can handle markup code; that is read and write to xaml
            </summary>
        </member>
        <member name="P:Photon.Markup.IHandler.Document">
            <summary>
            Gets the <see cref="T:System.Xml.XmlDocument"/> containing the markup code
            </summary>
        </member>
        <member name="P:Photon.Markup.IHandler.NamespaceDeclarations">
            <summary>
            Gets a collection of all the <see cref="T:Photon.Markup.NamespaceDeclaration"/> in the <see cref="T:Photon.Markup.IHandler"/>'s scope
            </summary>
        </member>
        <member name="P:Photon.Markup.IHandler.ElementTree">
            <summary>
            Gets the xaml document's <see cref="T:Photon.DependencyElementTree"/>
            </summary>
        </member>
        <member name="P:Photon.Markup.IHandler.ElementKeys">
            <summary>
            Gets a dictionary containing the both the key and hashcode of registered element
            </summary>
        </member>
        <member name="M:Photon.Markup.IHandler.ElementTypeOf(System.String,System.String)">
            <summary>
            Determines the type equivalency based on both the specified namespace prefix and type name
            </summary>
            <param name="namespacePrefix">The prefix of the referenced type's namespace</param>
            <param name="typeName">The name of the referenced type</param>
            <returns>The <see cref="T:System.Type"/> equivalency based on both the specified namespace prefix and type name</returns>
        </member>
        <member name="T:Photon.Markup.Context">
            <summary>
            Defines helper methods to handle <see cref="T:Photon.Markup.IContext"/>s
            </summary>
        </member>
        <member name="F:Photon.Markup.Context.Current">
            <summary>
            Gets the current <see cref="T:Photon.Markup.IContext"/>
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.Animation`1">
            <summary>
            Represents the base class for all animations
            </summary>
            <typeparam name="T">The type of the animated value</typeparam>
        </member>
        <member name="P:Photon.Media.Animations.Animation`1.From">
            <summary>
            Gets/Sets the value from which to begin animating
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.Animation`1.To">
            <summary>
            Gets/Sets the value until which to animate
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.Animation`1.CurrentValue">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.Animation`1.OnBegin">
            <summary>
            When overriden in a class, this method allows execution of code when the animation begins
            </summary>
            <returns>A boolean indicating whether or not the animation could begin</returns>
        </member>
        <member name="M:Photon.Media.Animations.Animation`1.OnStop">
            <summary>
            When overriden in a class, this method allows execution of code when the animation begins
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.Animation`1.OnCompleted">
            <summary>
            When overriden in a class, this method allows execution of code when the animation is completed
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.AnimationClock">
            <summary>
            Maintains the run-time state of an AnimationTimeline and processes its output values
            </summary>
        </member>
        <member name="E:Photon.Media.Animations.AnimationClock.Completed">
            <summary>
            This event is fired whenever the animation is completed
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationClock.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Animations.AnimationClock"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationClock.IsRunning">
            <summary>
            Gets a boolean indicating whether or not the animation clock is running
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationClock.Elapsed">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> representing the amount of time elapsed since the animation clock has beun
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationClock.Begin">
            <summary>
            When implemented in a class, this method starts the animation clock
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationClock.Render">
            <summary>
            When implemented in a class, this method processes the animation clock's output values
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationClock.Stop">
            <summary>
            When implemented in a class, this method stops the animation clock
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.AnimationTimeline">
            <summary>
            AnimationTimeline is a base class for core level implementations building on Photon animations and basic animation characteristics.
            </summary>
        </member>
        <member name="E:Photon.Media.Animations.AnimationTimeline.Completed">
            <summary>
            This event is fired whenever the <see cref="T:Photon.Media.Animations.AnimationTimeline"/> is completed
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.Clock">
            <summary>
            Gets the <see cref="T:Photon.Media.Animations.AnimationClock"/> associated with the animation timeline
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.BeginTime">
            <summary>
            Gets/Sets a <see cref="T:System.TimeSpan"/> representing the animation's begin time
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.Duration">
            <summary>
            Gets/Sets a <see cref="T:System.TimeSpan"/> representing the animation's duration
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.AutoReverse">
            <summary>
            Gets/Sets a boolean indicating whether or not to reverse the animation upon completion
            <para></para>Use the <see cref="P:Photon.Media.Animations.AnimationTimeline.RepeatBehavior"/> property to configure the way the animation repeats
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.RepeatBehavior">
            <summary>
            Gets/Sets the <see cref="P:Photon.Media.Animations.AnimationTimeline.RepeatBehavior"/> determining how the animation repeats
            <para></para>The <see cref="P:Photon.Media.Animations.AnimationTimeline.AutoReverse"/> should be set to true for the animation to repeat
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.FillBehavior">
            <summary>
            Gets/Sets a <see cref="P:Photon.Media.Animations.AnimationTimeline.FillBehavior"/> representing the way the animation behaves upon completion
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.Ease">
            <summary>
            Gets/Sets the animation's <see cref="T:Photon.Media.Animations.EasingFunction"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.IsRunning">
            <summary>
            Gets a boolean indicating whether or not the animation is running
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.IsReverting">
            <summary>
            Gets a boolean indicating whether or not the animation is reverting
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.RevertTime">
            <summary>
            Gets/Sets a <see cref="T:System.TimeSpan"/> representing the time at which the animation begun reverting for the last time
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.Target">
            <summary>
            Gets the <see cref="T:Photon.DependencyObject"/> which's <see cref="T:Photon.DependencyProperty"/> is being animated
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.TargetProperty">
            <summary>
            Gets the <see cref="T:Photon.DependencyProperty"/> animated by the animation timeline
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.Time">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> indicating the time elasped since the animation timeline has begun
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.AnimationTimeline.OriginalValue">
            <summary>
            Gets/Sets an object representing the value returned by the <see cref="P:Photon.Media.Animations.AnimationTimeline.Target"/>'s <see cref="T:Photon.DependencyProperty"/> prior to begining the animation
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.GetNormalizedTime">
            <summary>
            Gets a double representing the animation timeline's normalized time (ranging from 0.0 to 1.0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.Begin(Photon.Media.Animations.AnimationClock)">
            <summary>
            Begins the animation, based on the specified <see cref="T:Photon.Media.Animations.AnimationClock"/>
            </summary>
            <param name="animationClock">The <see cref="T:Photon.Media.Animations.AnimationClock"/> the animation belongs to</param>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.Render">
            <summary>
            Renders the animation by processing the targeted output value
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.Stop">
            <summary>
            Stops the animation
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.OnBegin">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the animation begins
            </summary>
            <returns>A boolean indicating whether or not the animation could begun</returns>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.OnRender">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the animation renders
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.OnStop">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the animation stops
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.AnimationTimeline.OnCompleted">
            <summary>
            When overriden in a class, this method allows the execution of code whenever the animation is completed
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.EasingFunction">
            <summary>
            Provides the base class for all the easing functions
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.EasingFunction.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Animations.EasingFunction"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.EasingFunction.Mode">
            <summary>
            Gets/Sets the function's <see cref="T:Photon.Media.Animations.EasingMode"/>
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.EasingFunction.EasingCore(System.Double)">
            <summary>
            Provides the logic portion of the easing function that you can override to produce the EaseIn mode of the custom easing function
            </summary>
            <param name="normalizedTime">A double representing the animation's normalized time (ranging from 0.0 to 1.0)</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Media.Animations.RepeatBehavior">
            <summary>
            Describes how a <see cref="T:Photon.Media.Animations.Animation`1"/> repeats its simple duration
            </summary>
        </member>
        <member name="P:Photon.Media.Animations.RepeatBehavior.Mode">
            <summary>
            Gets the <see cref="T:Photon.Media.Animations.RepeatBehavior"/>'s <see cref="T:Photon.Media.Animations.RepeatMode"/>
            </summary>
        </member>
        <member name="M:Photon.Media.Animations.RepeatBehavior.RepeatAnimation(Photon.Media.Animations.AnimationTimeline)">
            <summary>
            Determines whether or not the animation should be repeated
            </summary>
            <param name="animation">The <see cref="T:Photon.Media.Animations.Animation`1"/> to check</param>
            <returns>A boolean indicating whether or not the animation should be repeated</returns>
        </member>
        <member name="P:Photon.Media.Animations.RepeatBehavior.Forever">
            <summary>
            Gets a <see cref="T:Photon.Media.Animations.RepeatBehavior"/> that specifies an infinite number of repetitions.
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.EasingMode">
            <summary>
            Defines the modes in which classes derived from <see cref="T:Photon.Media.Animations.EasingFunction"/> perform their easing
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.EasingMode.EaseIn">
            <summary>
            Interpolation follows the mathematical formula associated with the easing function
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.EasingMode.EaseOut">
            <summary>
            Interpolation follows 100% interpolation minus the output of the formula associated with the easing function
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.EasingMode.EaseInAndOut">
            <summary>
            Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.FillBehavior">
            <summary>
            Specifies how a <see cref="T:Photon.Media.Animations.AnimationTimeline"/> behaves when it is outside its active period but its parent is inside its active or hold period.
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.FillBehavior.Default">
            <summary>
            No specific action is taken, and the animated property's value remains the last set by the animation (as defined by the <see cref="P:Photon.Media.Animations.Animation`1.To"/> property)
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.FillBehavior.Reset">
            <summary>
            When the animation completes, the animated property's value is reset to the value returned by the <see cref="P:Photon.Media.Animations.Animation`1.From"/> property)
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.FillBehavior.OriginalValue">
            <summary>
            When the animation completes, the animated property's value is reset to the value it held before starting the animation
            </summary>
        </member>
        <member name="T:Photon.Media.Animations.RepeatMode">
            <summary>
            Describes how a <see cref="T:Photon.Media.Animations.Animation`1"/> repeats its simple duration
            </summary>
        </member>
        <member name="F:Photon.Media.Animations.RepeatMode.Forever">
            <summary>
            The animation will repeat itself forever
            </summary>
        </member>
        <member name="T:Photon.Media.Brush">
            <summary>
            Defines objects used to paint graphical objects. Classes that derive from Brush describe how the area is painted
            </summary>
        </member>
        <member name="F:Photon.Media.Brush.OpacityProperty">
            <summary>
            Describes the <see cref="P:Photon.Media.Brush.Opacity"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Brush.Opacity">
            <summary>
            Gets/Sets the opacity of the Brush
            </summary>
        </member>
        <member name="M:Photon.Media.Brush.Use(Photon.Media.Rectangle)">
            <summary>
            Uses the brush to paint a geometry
            </summary>
            <param name="geometryBounds">The <see cref="T:Photon.Media.Rectangle"/> representing the geometry's bounds</param>
        </member>
        <member name="M:Photon.Media.Brush.Clone">
            <summary>
            Clones the brush
            </summary>
            <returns>The clone of the <see cref="T:Photon.Media.Brush"/></returns>
        </member>
        <member name="T:Photon.Media.Geometry">
            <summary>
            Classes that derive from this abstract base class define geometric shapes. Geometry objects can be used for clipping, hit-testing, and rendering 2-D graphic data
            </summary>
        </member>
        <member name="M:Photon.Media.Geometry.FillContains(Photon.Media.Point)">
            <summary>
            Returns a boolean indicating whether or not the specified <see cref="T:Photon.Media.Point"/> is contained by the <see cref="T:Photon.Media.Geometry"/>
            </summary>
            <param name="point">The <see cref="T:Photon.Media.Point"/> to test</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Media.PathSegment">
            <summary>
            Represents a segment of a <see cref="T:Photon.Media.PathFigure"/> object
            </summary>
        </member>
        <member name="M:Photon.Media.PathSegment.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.PathSegment"/>
            </summary>
        </member>
        <member name="M:Photon.Media.PathSegment.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.PathSegment"/>
            <param name="isStroked">Indicates wheter or not the <see cref="T:Photon.Media.PathSegment"/> is stroked</param>
            </summary>
        </member>
        <member name="F:Photon.Media.PathSegment.IsStrokedProperty">
            <summary>
            Identifies the PathSegment's IsStroked <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Media.PathSegment.IsStroked">
            <summary>
            Gets or sets a value that indicates whether the segment is stroked
            </summary>
        </member>
        <member name="T:Photon.Media.PathFigureCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.Media.PathFigure"/> objects that collectively make up the geometry of a <see cref="T:Photon.Media.PathGeometry"/>
            </summary>
        </member>
        <member name="T:Photon.Media.PathSegmentCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.Media.PathSegment"/> objects that can be individually accessed by index
            </summary>
        </member>
        <member name="T:Photon.Media.PointCollection">
            <summary>
            Represents a collection of <see cref="T:Photon.Media.Point"/> values that can be individually accessed by index
            </summary>
        </member>
        <member name="T:Photon.Media.LineGeometry">
            <summary>
            Represents the geometry of a line
            </summary>
        </member>
        <member name="M:Photon.Media.LineGeometry.#ctor">
            <summary>
            Initializes a new instance of the LineGeometry class that has no length
            </summary>
        </member>
        <member name="M:Photon.Media.LineGeometry.#ctor(Photon.Media.Point,Photon.Media.Point)">
             <summary>
             	
            Initializes a new instance of the LineGeometry class that has the specified start and end points
             </summary>
             <param name="startPoint">The <see cref="T:Photon.Media.Point"/> at which the line starts</param>
             <param name="endPoint">The <see cref="T:Photon.Media.Point"/> at which the line ends</param>
        </member>
        <member name="P:Photon.Media.LineGeometry.StartPoint">
            <summary>
            Gets/sets the start point of the line
            </summary>
        </member>
        <member name="P:Photon.Media.LineGeometry.EndPoint">
            <summary>
            Gets/sets the end point of the line
            </summary>
        </member>
        <member name="M:Photon.Media.LineGeometry.FillContains(Photon.Media.Point)">
            <summary>
            Determines whether or not the specifiec point is on the line defined by the geometry
            </summary>
            <param name="point">The <see cref="T:Photon.Media.Point"/> to check</param>
            <returns>A boolean indicating whether or not the specifiec point is on the line defined by the geometry</returns>
        </member>
        <member name="T:Photon.Media.LineSegment">
            <summary>
            Creates a line between two points in a <see cref="T:Photon.Media.PathFigure"/>.
            </summary>
        </member>
        <member name="M:Photon.Media.LineSegment.#ctor">
            <summary>
            Initializes a new instance of the LineSegment class
            </summary>
        </member>
        <member name="M:Photon.Media.LineSegment.#ctor(Photon.Media.Point,System.Boolean)">
            <summary>
            Initializes a new instance of the LineSegment class that has the specified end Point and Boolean that determines whether this LineSegment is stroked.
            </summary>
            <param name="point">The end point of the line segment</param>
            <param name="stroked">Indicates whether or not the line segment is stroked</param>
        </member>
        <member name="F:Photon.Media.LineSegment.PointProperty">
            <summary>
            Identifies the LineSegement's Point <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Media.LineSegment.Point">
            <summary>
            Gets or sets the end <see cref="T:Photon.Media.Point"/> of the line segment
            </summary>
        </member>
        <member name="T:Photon.Media.PathFigure">
            <summary>
            Represents a subsection of a geometry, a single connected series of two-dimensional geometric segments
            </summary>
        </member>
        <member name="M:Photon.Media.PathFigure.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.PathFigure"/> instance
            </summary>
        </member>
        <member name="P:Photon.Media.PathFigure.StartPoint">
            <summary>
            Gets/Sets the <see cref="T:Photon.Media.Point"/> at which the <see cref="T:Photon.Media.PathFigure"/> starts
            </summary>
        </member>
        <member name="P:Photon.Media.PathFigure.Segments">
            <summary>
            Gets a collection of the <see cref="T:Photon.Media.PathSegment"/>s the <see cref="T:Photon.Media.PathFigure"/> is made of
            </summary>
        </member>
        <member name="T:Photon.Media.PathGeometry">
            <summary>
            Represents a complex shape that may be composed of arcs, curves, ellipses, lines, and rectangles
            </summary>
        </member>
        <member name="M:Photon.Media.PathGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.Media.PathGeometry"/> class
            </summary>
        </member>
        <member name="P:Photon.Media.PathGeometry.Figures">
            <summary>
            Gets a collection of the <see cref="T:Photon.Media.PathFigure"/>s the <see cref="T:Photon.Media.PathGeometry"/> is made of
            </summary>
        </member>
        <member name="M:Photon.Media.PathGeometry.FillContains(Photon.Media.Point)">
            <summary>
            Returns a boolean indicating whether or not the specified <see cref="T:Photon.Media.Point"/> is contained by the <see cref="T:Photon.Media.PathGeometry"/>
            </summary>
            <param name="point">The <see cref="T:Photon.Media.Point"/> to test</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Media.PolyLineSegment">
            <summary>
            Represents a set of line segments defined by a <see cref="T:Photon.Media.PointCollection"/> with each <see cref="T:Photon.Media.Point"/> specifying the end point of a line segment
            </summary>
        </member>
        <member name="M:Photon.Media.PolyLineSegment.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.PolyLineSegment"/> instance
            </summary>
        </member>
        <member name="P:Photon.Media.PolyLineSegment.Points">
            <summary>
            Gets or sets the collection of <see cref="T:Photon.Media.Point"/> structures that defines this <see cref="T:Photon.Media.PolyLineSegment"/> object
            </summary>
        </member>
        <member name="T:Photon.Media.Vertex`1">
            <summary>
            The <see cref="T:Photon.Media.Vertex`1"/> structure describes the position of a point in 2D or 3D space
            </summary>
            <typeparam name="T">The type of the x, y and z values wrapped by the <see cref="T:Photon.Media.Vertex`1"/>.<para></para>
            The available types to choose from are short, int, double and float</typeparam>
        </member>
        <member name="M:Photon.Media.Vertex`1.#ctor(`0,`0)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Vertex`1"/> based on both the specified x and y values
            </summary>
            <param name="x">An object representing the horizontal axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/></param>
            <param name="y">An object representing the vertical axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/></param>
        </member>
        <member name="M:Photon.Media.Vertex`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Vertex`1"/> based on both the specified x and y values
            </summary>
            <param name="x">An object representing the horizontal axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/></param>
            <param name="y">An object representing the vertical axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/></param>
            <param name="z">An object representing the depth value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/></param>
        </member>
        <member name="P:Photon.Media.Vertex`1.X">
            <summary>
            Gets an object representing the horizontal axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Vertex`1.Y">
            <summary>
            Gets an object representing the vertical axis value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Vertex`1.Z">
            <summary>
            Gets an object representing the depth value of the position wrapped by the <see cref="T:Photon.Media.Vertex`1"/>
            </summary>
        </member>
        <member name="P:Photon.Media.Vertex`1.Stride">
            <summary>
            Gets an int representing the <see cref="T:Photon.Media.Vertex`1"/>'s size, in bytes 
            </summary>
        </member>
        <member name="P:Photon.Media.Vertex`1.PointerType">
            <summary>
            Gets the <see cref="T:OpenTK.Graphics.OpenGL.VertexPointerType"/> corresponding to the <see cref="T:Photon.Media.Vertex`1"/> generic type argument
            </summary>
        </member>
        <member name="T:Photon.Media.VertexBufferObject`1">
            <summary>
            Also known as VBO, the <see cref="T:Photon.Media.VertexBufferObject`1"/> provides methods for uploading vertex data (position, normal vector, color, etc.) to the video device for non-immediate-mode rendering. 
            VBOs offer substantial performance gains over immediate mode rendering primarily because the data resides in the video device memory rather than the system memory and so it can be rendered directly by the video device
            </summary>
            <typeparam name="T">The type of the x, y and z values wrapped by the <see cref="T:Photon.Media.Vertex`1"/> instances to be contained by the <see cref="T:Photon.Media.VertexBufferObject`1"/></typeparam>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.VertexBufferLength">
            <summary>
            Represents the initial length of the VertexBufferObject
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.ElementBufferLength">
            <summary>
            Represents the initial length of the ElementBufferObject
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.VertexBufferObjectId">
            <summary>
            Represents the id of the vertex buffer index
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.ElementBufferObjectId">
            <summary>
            Represents the id of the element buffer object
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.Vertices">
            <summary>
            An array of <see cref="T:Photon.Media.Vertex`1"/> instances contained by the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="F:Photon.Media.VertexBufferObject`1.Indices">
            <summary>
            Represents the indices contained by the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="P:Photon.Media.VertexBufferObject`1.PrimitiveType">
            <summary>
            Gets/sets the <see cref="T:OpenTK.Graphics.OpenGL.PrimitiveType"/> used to render the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.Initialize">
            <summary>
            Initializes the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.SetVertex(System.Int32,Photon.Media.Vertex{`0})">
            <summary>
            Replaces the <see cref="T:Photon.Media.Vertex`1"/> at the specified index by the specified <see cref="T:Photon.Media.Vertex`1"/>
            </summary>
            <param name="vertexIndex">The index of the vertex to replace</param>
            <param name="vertex">The <see cref="T:Photon.Media.Vertex`1"/> used to replace the <see cref="T:Photon.Media.Vertex`1"/> at the specified index</param>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.SetVertices(Photon.Media.Vertex{`0}[])">
            <summary>
            Sets the array of <see cref="T:Photon.Media.Vertex`1"/> associated with the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
            <param name="vertices">The array of <see cref="T:Photon.Media.Vertex`1"/> to upload to the <see cref="T:Photon.Media.VertexBufferObject`1"/></param>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.SetIndice(System.Int32,System.UInt16)">
            <summary>
            Replaces the indice at the specified index by the specified value
            </summary>
            <param name="indiceIndex">The index of the indice to replace</param>
            <param name="indice">The indice used to replace the indice at the specified index</param>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.SetIndices(System.UInt16[])">
            <summary>
            Sets the array of indices associated with the element buffer object
            </summary>
            <param name="indices">The array of indices to upload to the element buffer object</param>
        </member>
        <member name="M:Photon.Media.VertexBufferObject`1.Render">
            <summary>
            Renders the <see cref="T:Photon.Media.VertexBufferObject`1"/>
            </summary>
        </member>
        <member name="T:Photon.Media.ColorExtensions">
            <summary>
            This class defines extention methods for the <see cref="T:System.Drawing.Color"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.ColorExtensions.FromHex(System.String)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> instance based on the specified hex color string
            </summary>
            <param name="hexColorString">A string containing an hexadecimal color code</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> instance based on the specified hex color string</returns>
        </member>
        <member name="T:Photon.Media.FontFamily">
            <summary>
            This class is a wrapper for the <see cref="T:System.Drawing.FontFamily"/> class.<para></para>
            Its sole purpose is to provide conversion mechanisms to the wrapped class
            </summary>
        </member>
        <member name="M:Photon.Media.FontFamily.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.FontFamily"/>
            </summary>
        </member>
        <member name="M:Photon.Media.FontFamily.#ctor(System.String)">
            <summary>
            The default constructor for the <see cref="T:Photon.Media.FontFamily"/> type
            </summary>
            <param name="name">The name of the font family</param>
        </member>
        <member name="P:Photon.Media.FontFamily.Name">
            <summary>
            Gets the font family's name
            </summary>
        </member>
        <member name="M:Photon.Media.FontFamily.ToGdiFontFamily">
            <summary>
            Converts the <see cref="T:Photon.Media.FontFamily"/> to its <see cref="T:System.Drawing.FontFamily"/> counterpart
            </summary>
            <returns>The GDI+ <see cref="T:System.Drawing.FontFamily"/></returns>
        </member>
        <member name="P:Photon.Media.FontFamily.Default">
            <summary>
            Gets the default <see cref="T:Photon.Media.FontFamily"/> (Arial)
            </summary>
        </member>
        <member name="T:Photon.Media.ImageBrush">
            <summary>
            This class represents a brush that paints an area with an image
            </summary>
        </member>
        <member name="M:Photon.Media.ImageBrush.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.ImageBrush"/>
            </summary>
        </member>
        <member name="M:Photon.Media.ImageBrush.#ctor(System.Drawing.Bitmap)">
            <summary>
            The default constructor for the <see cref="T:Photon.Media.ImageBrush"/> class
            </summary>
            <param name="image">A <see cref="T:System.Drawing.Bitmap"/> representing the image to paint</param>
        </member>
        <member name="F:Photon.Media.ImageBrush.ImageProperty">
            <summary>
            Describes the <see cref="P:Photon.Media.ImageBrush.Image"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Media.ImageBrush.Image">
            <summary>
            Gets/Sets the <see cref="T:System.Drawing.Bitmap"/> reprenting the image to paint
            </summary>
        </member>
        <member name="M:Photon.Media.ImageBrush.Use(Photon.Media.Rectangle)">
            <summary>
            Uses the brush to paint a geometry
            </summary>
            <param name="geometryBounds">The <see cref="T:Photon.Media.Rectangle"/> representing the geometry's bounds</param>
        </member>
        <member name="M:Photon.Media.ImageBrush.Clone">
            <summary>
            Clones the brush
            </summary>
            <returns>The clone of the <see cref="T:Photon.Media.Brush"/></returns>
        </member>
        <member name="T:Photon.Media.MouseCursor">
            <summary>
            This class wraps the <see cref="T:OpenTK.MouseCursor"/> class<para></para>
            Its sole purpose is to provide conversion mechanisms to the wrapped class
            </summary>
        </member>
        <member name="M:Photon.Media.MouseCursor.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.MouseCursor"/> instance based on the default cursor
            </summary>
        </member>
        <member name="M:Photon.Media.MouseCursor.#ctor(OpenTK.MouseCursor)">
            <summary>
            The default constructor for the <see cref="T:Photon.Media.MouseCursor"/> class
            </summary>
            <param name="cursorObject"></param>
        </member>
        <member name="P:Photon.Media.MouseCursor.CursorObject">
            <summary>
            Gets the wrapped <see cref="T:OpenTK.MouseCursor"/> object
            </summary>
        </member>
        <member name="M:Photon.Media.MouseCursor.FromUri(System.Uri)">
            <summary>
            Creates a <see cref="T:Photon.Media.MouseCursor"/> based on the specified image
            </summary>
            <param name="cursorUri">The <see cref="T:System.Uri"/> of the image</param>
            <returns>A <see cref="T:Photon.Media.MouseCursor"/></returns>
        </member>
        <member name="F:Photon.Media.MouseCursor.Default">
            <summary>
            Gets the default <see cref="T:Photon.Media.MouseCursor"/>
            </summary>
        </member>
        <member name="T:Photon.Media.Point">
            <summary>
            Represents an ordered pair of double x and y coordinates that defines a point in a two-dimensional plane
            </summary>
        </member>
        <member name="M:Photon.Media.Point.#ctor(System.Double,System.Double)">
            <summary>
            The default constructor for the <see cref="T:Photon.Media.Point"/> class
            </summary>
            <param name="x">The horizontal position of the point</param>
            <param name="y">The vertical position of the point</param>
        </member>
        <member name="P:Photon.Media.Point.X">
            <summary>
            Gets the horizontal position of the point
            </summary>
        </member>
        <member name="P:Photon.Media.Point.Y">
            <summary>
            Gets the vertical position of the point
            </summary>
        </member>
        <member name="M:Photon.Media.Point.ToPointF">
            <summary>
            Gets the point's <see cref="T:System.Drawing.PointF"/> equivalency
            </summary>
            <returns>The <see cref="T:System.Drawing.PointF"/> equivalency of the point</returns>
        </member>
        <member name="M:Photon.Media.Point.Equals(System.Object)">
            <summary>
            Determines whether the <see cref="T:Photon.Media.Point"/> equals the specified object
            </summary>
            <param name="obj">The object to check for equality with the <see cref="T:Photon.Media.Point"/></param>
            <returns>A boolean indicating whether or not the <see cref="T:Photon.Media.Point"/> equals the specified object</returns>
        </member>
        <member name="M:Photon.Media.Point.GetHashCode">
            <summary>
            Returns the hashcode for this instance
            </summary>
            <returns>The instance's hashcode</returns>
        </member>
        <member name="M:Photon.Media.Point.op_Addition(Photon.Media.Point,Photon.Media.Point)">
            <summary>
            A + operator for the <see cref="T:Photon.Media.Point"/> class
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>The <see cref="T:Photon.Media.Point"/> resulting from the addition</returns>
        </member>
        <member name="M:Photon.Media.Point.op_Subtraction(Photon.Media.Point,Photon.Media.Point)">
            <summary>
            A - operator for the <see cref="T:Photon.Media.Point"/> class
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>The <see cref="T:Photon.Media.Point"/> resulting from the substraction</returns>
        </member>
        <member name="M:Photon.Media.Point.op_Equality(Photon.Media.Point,Photon.Media.Point)">
            <summary>
            A == operator for the <see cref="T:Photon.Media.Point"/> class
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>A boolean indicating whether or not the point1 equals the point2</returns>
        </member>
        <member name="M:Photon.Media.Point.op_Inequality(Photon.Media.Point,Photon.Media.Point)">
            <summary>
            A != operator for the <see cref="T:Photon.Media.Point"/> class
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>A boolean indicating whether or not the point1 equals the point2</returns>
        </member>
        <member name="P:Photon.Media.Point.Empty">
            <summary>
            Gets an empty <see cref="T:Photon.Media.Point"/>
            </summary>
        </member>
        <member name="T:Photon.Media.Rectangle">
            <summary>
            Stores a set of four double numbers that represent the location and size of a rectangle
            </summary>
        </member>
        <member name="M:Photon.Media.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Rectangle"/> instance base on the specified x, y, width and height
            </summary>
            <param name="x">The horizontal position of the rectangle</param>
            <param name="y">The vertical position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:Photon.Media.Rectangle.#ctor(System.Double,System.Double,Photon.Media.Size)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Rectangle"/> instance base on the specified x, y and size
            </summary>
            <param name="x">The horizontal position of the rectangle</param>
            <param name="y">The vertical position of the rectangle</param>
            <param name="size">A <see cref="P:Photon.Media.Rectangle.Size"/> instance representing the size of the rectangle</param>
        </member>
        <member name="M:Photon.Media.Rectangle.#ctor(Photon.Media.Point,Photon.Media.Size)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Rectangle"/> instance base on the specified position and size
            </summary>
            <param name="position">A <see cref="T:Photon.Media.Point"/> instance representing the position of the rectangle</param>
            <param name="size">A <see cref="T:Photon.Media.Size"/> instance representing the size of the rectangle</param>
        </member>
        <member name="P:Photon.Media.Rectangle.X">
            <summary>
            Gets the horizontal position of the rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Y">
            <summary>
            Gets the vertical position of the rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Width">
            <summary>
            Gets the rectangle's width
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Height">
            <summary>
            Gets the rectangle's height
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Left">
            <summary>
            Gets the rectangle's left, which is the horizontal position of the rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Top">
            <summary>
            Gets the rectangle's top, which is the vertical position of the rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Right">
            <summary>
            Gets the the rectangle's right, which is equals to the <see cref="P:Photon.Media.Rectangle.Left"/> property added to the <see cref="P:Photon.Media.Rectangle.Width"/> property
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Bottom">
            <summary>
            Gets the the rectangle's bottom, which is equals to the <see cref="P:Photon.Media.Rectangle.Top"/> property added to the <see cref="P:Photon.Media.Rectangle.Height"/> property
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Position">
            <summary>
            Gets a <see cref="T:Photon.Media.Point"/> representing the rectangle's position
            </summary>
        </member>
        <member name="P:Photon.Media.Rectangle.Size">
            <summary>
            Gets a <see cref="T:Photon.Media.Size"/> representing the rectangle's size
            </summary>
        </member>
        <member name="M:Photon.Media.Rectangle.Contains(Photon.Media.Point)">
            <summary>
            Determines whether or not the specified point is within the rectangle's bound
            </summary>
            <param name="point">The <see cref="T:Photon.Media.Point"/> to check</param>
            <returns>A boolean indicating whether or not the specified point is within the rectangle's bound</returns>
        </member>
        <member name="M:Photon.Media.Rectangle.ToRectangleF">
            <summary>
            Returns the <see cref="T:System.Drawing.RectangleF"/> equivalency of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Media.Rectangle.Empty">
            <summary>
            An empty (default) instance of the rectangle struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photon.Media.Size">
            <summary>
            Implements a structure that is used to describe the Size of an object
            </summary>
        </member>
        <member name="M:Photon.Media.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Size"/> with the specified width and height
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:Photon.Media.Size.Width">
            <summary>
            Gets the width of this size instance
            </summary>
        </member>
        <member name="P:Photon.Media.Size.Height">
            <summary>
            Gets the height of this size instance
            </summary>
        </member>
        <member name="M:Photon.Media.Size.ToSizeF">
            <summary>
            Gets the <see cref="T:System.Drawing.SizeF"/> equivalency of the size class
            </summary>
        </member>
        <member name="P:Photon.Media.Size.Empty">
            <summary>
            Gets an empty <see cref="T:Photon.Media.Size"/>
            </summary>
        </member>
        <member name="T:Photon.Media.SolidColorBrush">
            <summary>
            This class represents a brush that paints an area with a solid color
            </summary>
        </member>
        <member name="M:Photon.Media.SolidColorBrush.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Media.SolidColorBrush"/>
            </summary>
        </member>
        <member name="M:Photon.Media.SolidColorBrush.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.SolidColorBrush"/> with the specified <see cref="T:System.Drawing.Color"/>
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> associated with the brush</param>
        </member>
        <member name="F:Photon.Media.SolidColorBrush.ColorProperty">
            <summary>
            Describes the <see cref="P:Photon.Media.SolidColorBrush.Color"/> <see cref="T:Photon.DependencyProperty"/>
            </summary>
        </member>
        <member name="P:Photon.Media.SolidColorBrush.Color">
            <summary>
            Gets/Sets the <see cref="T:System.Drawing.Color"/> associated with the brush
            </summary>
        </member>
        <member name="M:Photon.Media.SolidColorBrush.Use(Photon.Media.Rectangle)">
            <summary>
            Uses the brush to paint a geometry
            </summary>
            <param name="geometryBounds">The <see cref="T:Photon.Media.Rectangle"/> representing the geometry's bounds</param>
        </member>
        <member name="M:Photon.Media.SolidColorBrush.Clone">
            <summary>
            Clones the brush
            </summary>
            <returns>The clone of the <see cref="T:Photon.Media.Brush"/></returns>
        </member>
        <member name="T:Photon.Media.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four Double values describe the Left, Top, Right, and Bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="M:Photon.Media.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Thickness"/> with Left, Top, Right and Bottom properties set to the specified value
            </summary>
            <param name="all">The width, in pixels, of the left, top, right and left sides of the bounding rectangle</param>
        </member>
        <member name="M:Photon.Media.Thickness.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Thickness"/> with the specified values for both the Left and Right, and both the Top and Bottom properties
            </summary>
            <param name="leftAndRight">The width, in pixels, of both the left and top sides of the bounding rectangle</param>
            <param name="topAndBottom">The width, in pixels, of both the top and bottom sides of the bounding rectangle</param>
        </member>
        <member name="M:Photon.Media.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Photon.Media.Thickness"/> with the specified values for the Left, Top, Right and Bottom properties
            </summary>
            <param name="left">The width, in pixels, of the left side of the bounding rectangle</param>
            <param name="top">The width, in pixels, of the upper side of the bounding rectangle</param>
            <param name="right">The width, in pixels, of the right side of the bounding rectangle</param>
            <param name="bottom">The width, in pixels, of the upper side of the bounding rectangle</param>
        </member>
        <member name="P:Photon.Media.Thickness.Left">
            <summary>
            Gets or sets the width, in pixels, of the left side of the bounding rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Thickness.Top">
            <summary>
            Gets or sets the width, in pixels, of the upper side of the bounding rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Thickness.Right">
            <summary>
            Gets or sets the width, in pixels, of the right side of the bounding rectangle
            </summary>
        </member>
        <member name="P:Photon.Media.Thickness.Bottom">
            <summary>
            Gets or sets the width, in pixels, of the upper side of the bounding rectangle
            </summary>
        </member>
        <member name="F:Photon.Media.Thickness.Empty">
            <summary>
            An empty (default) instance of the thickness struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photon.Media.StringExtensions">
            <summary>
            This class defines extensions for the <see cref="T:System.String"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.StringExtensions.IsNumeric(System.String)">
            <summary>
            Returns a boolean indicating whether or not the string is numeric
            </summary>
            <param name="extended">The extended string</param>
            <returns>A boolean indicating whether or not the string is numeric</returns>
        </member>
        <member name="M:Photon.Media.StringExtensions.IsAlphaNumeric(System.String)">
            <summary>
            Returns a boolean indicating whether or not the string is alphanumeric
            </summary>
            <param name="extended">The extended string</param>
            <returns>A boolean indicating whether or not the string is alphanumeric</returns>
        </member>
        <member name="M:Photon.Media.StringExtensions.IsHexColorString(System.String)">
            <summary>
            Returns a boolean indicating whether or not the string contains an hexadecimal color code
            </summary>
            <param name="extended">The extended string</param>
            <returns>A boolean indicating whether or not the string contains an hexadecimal color code</returns>
        </member>
        <member name="M:Photon.Media.StringExtensions.IsArgbColorString(System.String)">
            <summary>
            Returns a boolean indicating whether or not the string contains an ARGB/RGB color code
            </summary>
            <param name="extended">The extended string</param>
            <returns>A boolean indicating whether or not the string contains an ARGB/RGB color code</returns>
        </member>
        <member name="T:Photon.Media.BrushConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.Brush"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.BrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.BrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.Brush"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.FontFamilyConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.FontFamily"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.FontFamilyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.FontFamilyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.FontFamily"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.MouseCursorConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.MouseCursor"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.MouseCursorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.MouseCursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.MouseCursor"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.PointConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.Point"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.Point"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.RectangleConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.Rectangle"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.Rectangle"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.SizeConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.Size"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.Size"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Media.ThicknessConverter">
            <summary>
            The <see cref="T:System.ComponentModel.TypeConverter"/> dedicated to the <see cref="T:Photon.Media.Thickness"/> type
            </summary>
        </member>
        <member name="M:Photon.Media.ThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean indicating whether or not the converter can convert from the specified source type
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="sourceType">The source type to check</param>
            <returns>A boolean indicating whether or not the converter can convert from the specified source type</returns>
        </member>
        <member name="M:Photon.Media.ThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Try to convert the specified value into a <see cref="T:Photon.Media.Thickness"/>
            </summary>
            <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> associated with the request</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> associated with the request</param>
            <param name="value">The value to convert</param>
            <returns>An <see cref="T:System.Object"/> representing the converted value</returns>
        </member>
        <member name="T:Photon.Threading.DispatcherObject">
            <summary>
            Represents an object that is associated with a <see cref="T:Photon.Threading.Dispatcher"/>
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherObject.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Threading.DispatcherObject"/> associated with a new <see cref="T:Photon.Threading.Dispatcher"/>
            </summary>
        </member>
        <member name="P:Photon.Threading.DispatcherObject.Dispatcher">
            <summary>
            Gets the <see cref="T:Photon.Threading.Dispatcher"/> associated with the <see cref="T:Photon.Threading.DispatcherObject"/>
            </summary>
        </member>
        <member name="T:Photon.Threading.PriorityQueue`1">
            <summary>
            Represents a queue of values prioritized thanks to the specified <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
            <typeparam name="TValue">The type of the prioritized values</typeparam>
            <remarks>This implementation is based on the solution provided by Alexey Kurakin on http://www.codeproject.com/Articles/126751/Priority-queue-in-C-with-the-help-of-heap-data-str</remarks>
        </member>
        <member name="F:Photon.Threading.PriorityQueue`1._BaseHeap">
            <summary>
            The <see cref="T:Photon.Threading.PriorityQueue`1"/>'s base heap
            </summary>
        </member>
        <member name="F:Photon.Threading.PriorityQueue`1._GetPriorityPredicate">
            <summary>
            The predicate used to get the priority of a value
            </summary>
        </member>
        <member name="F:Photon.Threading.PriorityQueue`1._PriorityComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to prioritize the values
            </summary>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.#ctor(System.Func{`0,System.Int32},System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Initializes a new <see cref="T:Photon.Threading.PriorityQueue`1"/>
            </summary>
            <param name="getPriorityPredicate">The predicate used to retrieve the priority of a value</param>
            <param name="comparePredicate">The predicate used to prioritize values</param>
        </member>
        <member name="P:Photon.Threading.PriorityQueue`1.Count">
            <summary>
            Gets the <see cref="T:Photon.Threading.PriorityQueue`1"/>'s element count
            </summary>
        </member>
        <member name="P:Photon.Threading.PriorityQueue`1.IsEmpty">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Threading.PriorityQueue`1"/> is empty
            </summary>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified value
            </summary>
            <param name="value">The value to enqueue to the <see cref="T:Photon.Threading.PriorityQueue`1"/></param>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.Dequeue">
            <summary>
            Dequeues and returns the element with the lowest/highest priority residing in the <see cref="T:Photon.Threading.PriorityQueue`1"/>
            </summary>
            <returns>The element with the lowest/highest priority residing in the <see cref="T:Photon.Threading.PriorityQueue`1"/></returns>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.TryToDequeue(`0@)">
            <summary>
            Tries to dequeue the element with the lowest/highest priority residing in the <see cref="T:Photon.Threading.PriorityQueue`1"/> and returns a boolean indicating whether or not the operation was succesfull
            </summary>
            <param name="value">The element with the lowest/highest priority residing in the <see cref="T:Photon.Threading.PriorityQueue`1"/></param>
            <returns>True if an element was dequeued, false</returns>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.Insert(`0)">
            <summary>
            Inserts the value with the specified priority into the <see cref="T:Photon.Threading.PriorityQueue`1"/>
            </summary>
            <param name="value">The value to enqueue to the <see cref="T:Photon.Threading.PriorityQueue`1"/></param>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.HeapifyFromBeginningToEnd(System.Int32)">
            <summary>
            Heapifies the base heap, from the specified position to the end
            </summary>
            <param name="position">The position at which to start heapifying</param>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.HeapifyFromEndToBeginning(System.Int32)">
            <summary>
            Heapifies the base heap, from the start position to the specified position
            </summary>
            <param name="position">The position until which to heapify</param>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.ExchangeElements(System.Int32,System.Int32)">
            <summary>
            Exchange the elements at the specified positions
            </summary>
            <param name="position1">The index of the first element to exchange</param>
            <param name="position2">The index of the second element to exchange</param>
        </member>
        <member name="M:Photon.Threading.PriorityQueue`1.DeleteRoot">
            <summary>
            Deletes the root of the <see cref="T:Photon.Threading.PriorityQueue`1"/>
            </summary>
        </member>
        <member name="T:Photon.Threading.Dispatcher">
            <summary>
            Provides services for managing the queue of work items for a <see cref="T:System.Threading.Thread"/>
            </summary>
        </member>
        <member name="M:Photon.Threading.Dispatcher.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Threading.Dispatcher"/>
            </summary>
        </member>
        <member name="P:Photon.Threading.Dispatcher.Context">
            <summary>
            Gets the <see cref="T:Photon.Threading.DispatcherContext"/> associated with the <see cref="T:Photon.Threading.Dispatcher"/>
            </summary>
        </member>
        <member name="M:Photon.Threading.Dispatcher.Invoke(System.Delegate,Photon.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executes the specified Action synchronously on the thread the <see cref="T:Photon.Threading.Dispatcher"/> is associated with
            </summary>
            <param name="delegateMethod">The <see cref="T:System.Delegate"/> to execute</param>
            <param name="priority">The <see cref="T:Photon.Threading.DispatcherPriority"/> at which to execute the specified <see cref="T:System.Action"/></param>
            <param name="args">An array of object containg the ordered parameters of the <see cref="T:System.Action"/> to execute</param>
        </member>
        <member name="M:Photon.Threading.Dispatcher.BeginInvoke(System.Delegate,Photon.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executes the specified <see cref="T:System.Action"/> asynchronously with the specified arguments, at the specified <see cref="T:Photon.Threading.DispatcherPriority"/>, on the thread that the <see cref="T:Photon.Threading.Dispatcher"/> was created on
            </summary>
            <param name="delegateMethod">The <see cref="T:System.Delegate"/> to execute</param>
            <param name="priority">The <see cref="T:Photon.Threading.DispatcherPriority"/> at which to execute the specified <see cref="T:System.Action"/></param>
            <param name="args">An array of object containg the ordered parameters of the <see cref="T:System.Action"/> to execute</param>
        </member>
        <member name="T:Photon.Threading.DispatcherContext">
            <summary>
            The <see cref="T:System.Threading.SynchronizationContext"/> used by the <see cref="T:Photon.Threading.Dispatcher"/> to dispatch operations.<para></para> 
            It contains a <see cref="T:Photon.Threading.PriorityQueue`1"/> of <see cref="T:Photon.Threading.DispatcherOperation"/>s representing the work items to dispatch
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherContext._WorkingThread">
            <summary>
            The <see cref="T:Photon.Threading.Dispatcher"/>'s working <see cref="T:System.Threading.Thread"/>
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherContext._OperationsQueue">
            <summary>
            The <see cref="T:Photon.Threading.PriorityQueue`1"/> of <see cref="T:Photon.Threading.DispatcherOperation"/>s queued in the <see cref="T:Photon.Threading.DispatcherContext"/>
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.#ctor">
            <summary>
            Initializes a new <see cref="T:Photon.Threading.DispatcherContext"/> synchronized with the current <see cref="T:System.Threading.Thread"/><para></para>
            When using this constructor, the <see cref="!:DispatcherContext.DispatchOperations"/> method will have to be explicitly called by the <see cref="T:System.Threading.Thread"/> it is synchronized with
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.#ctor(System.Threading.ApartmentState)">
            <summary>
            Initialies a new <see cref="T:Photon.Threading.DispatcherContext"/> synchronized with a new <see cref="T:System.Threading.Thread"/> instance
            </summary>
            <param name="threadApartmentState">The <see cref="T:System.Threading.ApartmentState"/> of the <see cref="T:Photon.Threading.Dispatcher"/>'s <see cref="T:System.Threading.Thread"/></param>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.#ctor(Photon.Threading.DispatcherContext)">
            <summary>
            Initialies a new <see cref="T:Photon.Threading.DispatcherContext"/> synchronized based on the specified <see cref="T:Photon.Threading.DispatcherContext"/> instance
            </summary>
            <param name="sourceContext">The source <see cref="T:Photon.Threading.DispatcherContext"/> the <see cref="T:Photon.Threading.DispatcherContext"/> to create is based on</param>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches a synchronous message to a <see cref="T:System.Threading.SynchronizationContext"/>
            </summary>
            <param name="callback">The <see cref="T:System.Threading.SendOrPostCallback"/> to dispatch</param>
            <param name="state">The state argument of the specified <see cref="T:System.Threading.SendOrPostCallback"/>, that is a <see cref="T:Photon.Threading.DispatcherOperation"/></param>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches an asynchronous message to a <see cref="T:System.Threading.SynchronizationContext"/>
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.ExecuteOperations(System.Object)">
            <summary>
            Executes all the <see cref="T:Photon.Threading.DispatcherOperation"/>s residing in the <see cref="T:Photon.Threading.DispatcherOperation"/>'s <see cref="T:Photon.Threading.PriorityQueue`1"/>
            </summary>
            <param name="state">The state of the method call, that is the current <see cref="T:Photon.Threading.DispatcherContext"/></param>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.Dispose">
            <summary>
            Disposes of the <see cref="T:Photon.Threading.DispatcherContext"/> and underlying components
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherContext.ExecuteOperation(System.Object)">
            <summary>
            Executes the specified <see cref="T:Photon.Threading.DispatcherOperation"/>
            </summary>
            <param name="state">The state associated with the <see cref="M:Photon.Threading.DispatcherContext.ExecuteOperation(System.Object)"/> method call, that is a <see cref="T:Photon.Threading.DispatcherOperation"/></param>
        </member>
        <member name="T:Photon.Threading.DispatcherOperation">
            <summary>
            Represents an object that is used to interact with an operation that has been posted to the <see cref="T:Photon.Threading.Dispatcher"/> queue
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherOperation.#ctor(Photon.Threading.DispatcherPriority,System.Delegate,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Photon.Threading.DispatcherOperation"/> with the specified <see cref="T:Photon.Threading.DispatcherPriority"/>, callback delegate and callback arguments
            </summary>
            <param name="priority">The <see cref="T:Photon.Threading.DispatcherPriority"/> at which to execute the <see cref="T:Photon.Threading.DispatcherOperation"/></param>
            <param name="callback">The <see cref="T:System.Delegate"/> to execute</param>
            <param name="arguments">An array of objects representing the ordered arguments of the callback to invoke</param>
        </member>
        <member name="P:Photon.Threading.DispatcherOperation.Priority">
            <summary>
            Gets the <see cref="T:Photon.Threading.DispatcherPriority"/> at which to execute the <see cref="T:Photon.Threading.DispatcherOperation"/>
            </summary>
        </member>
        <member name="P:Photon.Threading.DispatcherOperation.Callback">
            <summary>
            Gets the <see cref="T:System.Delegate"/> to execute
            </summary>
        </member>
        <member name="P:Photon.Threading.DispatcherOperation.Arguments">
            <summary>
            Gets an array of objects representing the ordered arguments of the callback to invoke
            </summary>
        </member>
        <member name="P:Photon.Threading.DispatcherOperation.HandledEvent">
            <summary>
            Gets/sets the <see cref="T:System.Threading.ManualResetEvent"/> associated with the <see cref="T:Photon.Threading.DispatcherOperation"/>
            </summary>
        </member>
        <member name="P:Photon.Threading.DispatcherOperation.IsHandled">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Photon.Threading.DispatcherOperation"/> is handled thanks to a <see cref="T:System.Threading.ManualResetEvent"/>
            </summary>
        </member>
        <member name="M:Photon.Threading.DispatcherOperation.Execute">
            <summary>
            Executes the <see cref="T:Photon.Threading.DispatcherOperation"/>
            </summary>
        </member>
        <member name="T:Photon.Threading.DispatcherPriority">
            <summary>
            Describes the priorities at which <see cref="T:Photon.Threading.DispatcherOperation"/>s can be invoked by way of the <see cref="T:Photon.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherPriority.Lowest">
            <summary>
            The <see cref="T:Photon.Threading.DispatcherOperation"/> will be executed with the lowest priority
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherPriority.Low">
            <summary>
            The <see cref="T:Photon.Threading.DispatcherOperation"/> will be executed with a low priority
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherPriority.Normal">
            <summary>
            The <see cref="T:Photon.Threading.DispatcherOperation"/> will be executed with a normal priority
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherPriority.High">
            <summary>
            The <see cref="T:Photon.Threading.DispatcherOperation"/> will be executed with a high priority
            </summary>
        </member>
        <member name="F:Photon.Threading.DispatcherPriority.Highest">
            <summary>
            The <see cref="T:Photon.Threading.DispatcherOperation"/> will be executed with a the highest priority
            </summary>
        </member>
    </members>
</doc>
